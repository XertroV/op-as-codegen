#if UNIT_TEST
namespace Test_TmMap {
  /* Test // Mixin: Common Testing */
  bool runAsync(CoroutineFunc@ func) {
    startnew(func);
    return true;
  }
  
  void assert(bool condition, const string &in msg) {
    if (!condition) {
      throw('Assert failed: ' + msg);
    }
  }
  
  void debug_trace(const string &in msg) {
    trace(msg);
  }
  
  int countFileLines(const string &in path) {
    IO::File f(path, IO::FileMode::Read);
    string contents = f.ReadToEnd();
    f.Close();
    return contents.Split('\n').Length - (contents.EndsWith('\n') ? 1 : 0);
  }
  
  void UnitTest_Common_Nop() {
    print('\\$26fUnit Test Start: UnitTest_Common_Nop (42 tests)');
    print('\\$2f6Unit Test Success: UnitTest_Common_Nop (42 tests)');
    return;
  }
  
  bool unitTestResults_TmMap_CommonTesting = true
    && runAsync(CoroutineFunc(UnitTest_Common_Nop))
    ;
  
  /* Test // Mixin: ToFrom JSON Object */
  bool Test_ToJsonFromJson_Check(const string &in Id, const string &in Uid, const string &in Name, const string &in FileName, const string &in AuthorScore, const string &in GoldScore, const string &in SilverScore, const string &in BronzeScore, const string &in AuthorDisplayName, const string &in AuthorAccountId, const string &in AuthorWebServicesUserId, const string &in SubmitterAccountId, const string &in SubmitterWebServicesUserId, const string &in Style, const string &in TimeStamp, const string &in Type, const string &in FileUrl, const string &in ThumbnailUrl) {
    TmMap@ tmp = TmMap(Id, Uid, Name, FileName, AuthorScore, GoldScore, SilverScore, BronzeScore, AuthorDisplayName, AuthorAccountId, AuthorWebServicesUserId, SubmitterAccountId, SubmitterWebServicesUserId, Style, TimeStamp, Type, FileUrl, ThumbnailUrl);
    assert(tmp == TmMap(tmp.ToJson()), 'ToJsonFromJson fail: ' + Json::Write(tmp.ToJson()));
    return true;
  }
  
  void UnitTest_ToJsonFromJson_TmMap() {
    print('\\$26fUnit Test Start: UnitTest_ToJsonFromJson_TmMap (42 tests)');
    Test_ToJsonFromJson_Check("", "ꠂ쮰", "ᮔ﵇獣", "ᱶ谛䆳ꔼ躜ಙ㟊罐㳋뽄", "䚏꼸䃧쁐", "澯�჌", "�", "汯粌鉅", "框雱燐꬝", "㟳䢕颒饣ퟶ", "ꦻ땬黿救솳", "ᲊ̇॑", "堉", "ｓ", "摂ꖶ鍁紙", "遐鬱峝뻴", "", "懇�客㒞᫯볠");
    Test_ToJsonFromJson_Check("朣뵧칒튪윷窋澵", "䞚㌴⦱扬", "旰蓡柿ஷ", "봌彺য়ꬢ毝榆", "▏᯿", "ﱻ狀ꆟ㾩炤䩦ᛥ婫", "缧", "羘렷뵫皼䦋", "텫ᤊ�常祈ᵒ", "ྈ佛", "", "놪☼앇炄㐕畍鞙栥", "ᒽ罆鹌ﲒ", "ᩁ㟅", "⨗萃쎉뮏", "⻖蚇", "䔜", "鿊坯켫ꗥ쟭");
    Test_ToJsonFromJson_Check("窐踎윉懜翊신꨻በ", "충왦굸褢鶳", "퓹ꔴ㳇୭鹥灦", "Ηꨘ", "�ꧾ큽ⷾ뮁d更", "鍡轔", "搢趀絀죤箖质ᣙ욗恦", "뗃㷦⏓箝썷", "㏬蠑坖澂ꉃ뒅Ὄ", "៯ꭍڑ쀈ⵗ", "벛ﳾ啃둸瀀", "ᢻ샞饤浏䴾퍂蘇賻", "符䭭澀⽹ᱶ爅螝⬣", "∝", "ᖦﭭ见禁䡼淣럸튦蘥気", "੉Ⱬꖗ", "쎧ᨘ퉁", "㖄瑁캳륣");
    Test_ToJsonFromJson_Check("┛輄虼裳엽뷗", "쐤얪㵁㢝蔹ｽ≨⢮", "쒜≁隵ꄻ�ঽ㎒�郁❨", "ᘭ☖甩ῶ", "ꨝꮄ轓᧦㗭再섚", "籕ￌ龎", "ꗸ롼", "豣閑㏲ᔲ逥좣㉒", "", "䮪", "淐꺒Ｅ澮촎", "딙授↳웡", "턜㧷わ銂⧼馣谱", "鈧䴨餶갯", "ᯕᔺ痯겶", "颤짒傉", "髷漻拹ⓨ淪", "ꢶ嗲聅䄳ㆳ尉ź恮");
    Test_ToJsonFromJson_Check("瑏求뺝숯䐪䈞䞞䜋歹☰", "몖괩", "来", "", "ŀཎ؏쀯㖩ꅽ딚圤쯼벮", "髍澇㤘▝ħ蔋팪絠촊", "鿉穏뫤࡙攴쑋", "殠齒䡬뾋뿰", "湾ᾬ 讈䗺⼎Ԍ臋", "霋枒৹聸", "춤ᴼ馿ꞑ", "哻咷㟞曘靳", "晵룅쪹꨽ꩾ", "밥�틭姻韷ሸ", "꺗⯒ꊑ䐁ߠ", "ೕ멨靮垆规☉᡽햅𤋮", "噧㉊㚨줫⧑㙵", "炙띤䮔췬鼋탐缜檜⛟");
    Test_ToJsonFromJson_Check("䁹呦㷽혭㞥ۚ轔", "⍗ꦘ疁", "ᖀ㨎乕紇答㺳萵ꊕᑑ", "쉑ᢰ靡ﮃ嚄譵", "맆晝劬瘪剈授", "䱓䎸帍곔遲祆䊼Ꙕ", "釄⅟᥌", "鑭", "䥮䒸", "秇⋽吢ↈ種祶", "ԈǶ봒❖耾㾃庅鿹紣ㄷ", "ማ鰜㞡吂檞ꨁ딣⍣�", "澃軬ꇈ퉿", "꼭", "鷬헡㕚别", "汄ガ䴤䦳�榺骽䭄궉", "㪏", "");
    Test_ToJsonFromJson_Check("儻쳷", "㈹�䕋⿬", "댍〱둫", "妙薐㨵䓸뷐", "淮듑箩厈䃐᲎暓煆펾", "ご䎽붏矓暴颙", "耕", "삯Ϩ죂갗爑䬼", "ộ念ꓩꦼ�୹", "媴白矷孃뷌齟", "⊐檢䩬", "闞ꩍ㨧㞆豽몗䎇㤴", "蛢䲲", "㜆⏰‖馞", "暈೵횽祋阈", "뎝⺧䛙픮", "温膀璠", "襶喩ᓅ䍕");
    Test_ToJsonFromJson_Check("͢떳窖鬦歾䙖ᲀ㭔", "浸酒袑橒", "婯맕赕磳섇邋�⬞", "똼顯얮듖踉弹겸", "볶烓", "Ŧ묓买嗒쫑鋋�狫ꙡ", "똛엫ᦡ", "㽗ⷻ찄䛉笘ꚠ", "", "騀♖쥁", "⇹瓒", "黋▘녝裂ꦍꜚ", "珍㉡�", "〱긄⏽㈝㩵㈰㽇", "쩷ﾪ蛻紻ꕣ", "盩鮕雮亦釪挨⎈汼", "ˣꌋ뀀ᵧ", "礞䛜꜠㋆윊䰟");
    Test_ToJsonFromJson_Check("⽊", "෎턒柬઒궅", "☍஬街잜徺〶", "", "宕助鵒㼅ရ", "尰", "", "蚜詓䧒태ᢥ䔂旓", "罦ᘪꮚ찌䅏᷄", "", "㼾켶⾤", "�髀ⱪ탵Ⰽ妬눌鏩", "汦陚＝", "䋛頹", "雛깵黌壀唑", "걗�埈㩜ﾴ连㻰쮛䣔搵", "j⏣ꄺ暡", "ૉ");
    Test_ToJsonFromJson_Check("䦱�롴ퟌ", "", "Ҥ襤덌ῤ䐧ꮚ", "꽻뺿쭠贑麏揅שּ㰄", "饚", "ᠮ裡͆⩒轖", "㧱疦鹰냣", "咫", "蛊ꠌ⋞ネ얽䦵೿緋빢", "곑凋�蔐鴁⅘굡늤", "냢", "ﱛಃ", "㰧໾趀㍟㤒居개⣪", "⺪恎", "ꄀ", "Ⱕ⤑ﻂ殩姒糒ꃆ塀", "୊䥌", "琜䰶");
    Test_ToJsonFromJson_Check("", "끜", "瀨", "篦䙸䜋�셨鴈濙뾬䰦ⷅ", "尊䉸䅐⮱苸", "", "㇨璧頒⹜遛㔧ꡜ㵷枸첓", "躙腬킰䷡伜㉜ؤ", "", "", "邡㤩顽䤎饈⧚", "に٧Ⅲꂐ硘우梨杯", "솞", "埈핹腕励돠艄훔�웖륞", "폺뮾眲餻Ჩ栬飒홟", "뱏熫鏵밃碻ᶁ", "䍅Ꝙ袘䯞髟", "墼");
    Test_ToJsonFromJson_Check("୵㘱䢨̭", "瀍ﱬ⠔軙壑", "盌", "⫼䇤屴콙诘䒂", "ᄯ", "밄폒ꩼ", "᝹", "›䢬䟼", "⧔扦㿏Ⴇ⳵�", "騩ࡷ飵鍃Nခ툎", "䦚鶯짫帐뺿块砑툾ਫ਼", "", "栎纰乩궕껒꾤嬔䅒", "邝פᜃ梑蠰鸀臐ᙙ", "", "", "⠧뚇မͿ掗ν", "砐ᤌ�媓㊵覞잰聡");
    Test_ToJsonFromJson_Check("辣⇹鞫ᛙ牗ּㄯ", "ꆠ䆖ើ銨〘ほ跱倭", "", "땉뽟", "唃쟚뒍봴", "䱈೵谬㭹馤탢輂䥻", "톸ୠ앧茾⷗냱뾯", "", "䢎�殶빞紶忿뾙乜ꩰ䋢", "聇㻇ຫĽꪓ춒", "葄㿮", "K䱯", "᧸⹯줏气ቮꓛᦱ軽ꂜ", "瘏�逊퉈䨽턋ᄙ噕숲", "ฑ舩쿋��㥌쟍퐩", "틟ẚꙝῷ", "㫨὇ų᫝檃添쏯籰", "�ﵺ");
    Test_ToJsonFromJson_Check("灙", "趰ꑘ嗀嬺", "쭗緞쐼ჲ쥟", "㿥ᢧ맦䎀", "锖疊索", "ḡ핝쯜䨶堂", "麋�縣䉁ꨆ㏪", "ꕠ�䠴ⲱꢊ牢", "閠쯨목楥ᾥ", "㣈Ꞑꮀ䅦䒵", "ޯﮦ컻㴃ϻ쏁ŵ", "ᘟ縏맄ḅ♁뚌", "", "㿮", "ἇ༽욎玓ꔊ", "筗鏖豺埞赱�暜窋ᖪ", "ꠋ��숽쉳蔼蹥揪₃", "ꈘᵮ�㟇䬦쭁农");
    Test_ToJsonFromJson_Check("", "쎽", "ʔ镸〿ᭆ䅲砮˻ꇟ㉐", "٬ﻎ୑ﵶ溨", "ᆰ", "蜷輶男", "颓ヂ", "驸ﰹ珛㸤⇢㫢긩保", "꨷", "", "依⵶�伝猧", "㧘ڎ⣑뿇쳚醤", "䈩휲쾹짨뵅", "ﳘ鯇剸錛⧡", "及帾衞", "", "₏蛉", "䕔");
    Test_ToJsonFromJson_Check("∹ꛌ", "缜圆䐰饄音", "", "䞌锑敦暒쇠覡邯", "쫣娪颥驗䂨Ɱ✬맺�柚", "餢", "滛窖ꀰ又ꉂ节瓞", "唾滯룮욏䩘꫕", "疂纑긶", "（쇱묜դ旱嗙鸙", "鸚圲枴Іﰹ奡Ṵሗ", "놬׺ㅯ껶祓䲛虋", "⣍", "뻾婣⦯撥鵁ﮁ迁溺", "ꪓ䲽ⰻ㒥ӝ�⁸�", "", "龡웞Ꜳ噅䪂ᄞ�䁾", "釛畜鄴쑬뻞侔坺䎶");
    Test_ToJsonFromJson_Check("딟榗轾᥊鎓", "䩢", "섐裔힑Ӄ", "䓑�秊嚖愴讲댮", "딙", "ᘘס겫햳㭇⽛ᶶ", "趓ꃧ朊⼵ﶾ", "ꇽᶅ쟂", "ꏞ餩ꐅ刹糝꣄㷪簾밺", "愆", "蘲擘粔ḁ", "恕೹⊅", "", "瞁", "頿邬︺핬⤔臃龽", "塭䈐䰧욘፟", "꙰罸蕍鴨䒯䫙鴑艸", "⣯苒漒꤇ᨫ࿪逽ᴲ");
    Test_ToJsonFromJson_Check("俎�츗㫤涶隄", "⚩ꐰﴗڂ˔", "ᔉ幕覊냊坊ᚣ㮍橖୪", "螴磢턖灜", "ꚉ㣩ⵅ�䥆᤾⡶㵮", "븸搇娏", "Ω櫴", "�硿ᨍ", "픻䬔驱", "刾澌敲Þ욎", "뻌५�啵⸁煿忲", "櫤툈ᩅỺஒ", "贳﩯", "�滹꫺", "勳ꕭ㤂텟뢙⑇趢", "Ⴥ⬚唴ꭄ傑㠒弱洊", "걲凌韵�", "䦐㺇櫷犊⺩");
    Test_ToJsonFromJson_Check("瘸鍶똿", "ᘅǆ칁柴", "睯੄莄㾡琎鱡튃ඌ", "膺", "略铃롒匴", "қ", "", "⮊", "鐘㬸짏", "뭷ݏ괎崵�뚩쇟腎罈", "��", "뿱춟쨗퍑짏虲棖჻", "ꢗ璍깶", "ޜᨥ", "㮽싙ᜋѥ厏埏⡓桾", "粝", "᧬䑹뷢憵㱦", "ୄ蟖溚荠ݲ₶᰸鍠");
    Test_ToJsonFromJson_Check("☮緌ꂉ쨶", "䌹，㬿뜪նᮼ맏", "", "麻蒮๢鎶㺊鼷㹾鯫", "읝蝨䧌", "蓤Ẹ儂즀룗鰔", "顕﮽紒魝抍诫镤", "녹桏࿣珟눛", "푔簵罬", "ᡏ䆛기", "᭚ᐻ껚ꗻퟤ䲩㻂�", "諹淩Ṟ阯�", "쌺珂胋焻좻︀", "졐ⰾᒙ鰸콝䎶＠茉ꑘ", "ᩭそ", "땹搿鿄鄮絠畂ꈼ", "", "䈴哿灥龑탯");
    Test_ToJsonFromJson_Check("鯝铞", "䏿͑遒੆奯᥺", "ㄸ", "", "瘁펑", "焥爅覑慼萗냞", "㓨鎓粐", "ゲ貼輱", "⊳巵䉌ㆂ뾏ᐤ�瀍䞳뎡", "᲍冚刻鯀ᛷ䘉", "", "ꂔɦ჊៚곦", "䥹�ᗸ뮒綳忪豘虝", "", "䋉Ị㾹怑輎︗﷋⊵䀔", "癁㕻跽嶴ବ", "䭼쫓致湧", "");
    Test_ToJsonFromJson_Check("⊷傠䶏䳄몡ㅗ䐍㣯댱", "櫷⠞", "ᄌ詨俫럷ሇ穗鹣", "訳徐碹咷烦", "⩻Ꮩ谝䡚", "�仗Ý罶ﮒࡨ햝扁", "댇ꭞ㇋갗畴삃ﰪ싛", "ߤ杖Ա䉘૜ᄀᓍ", "剼 �曲ᩞ", "ꂀ刺Ὦ餚샘טּ�", "觰㌓浦姰頙", "蟛䉟푐鲚륩⯴", "ｼ䉔㰗", "ᡷ蜆㼈匢", "䴧롷饧눇䜆㬸퐞", "록톇伙窽ꯁ諱", "ꛄꁇ꩝ᩣ雳", "렓뷫税䟗ꪻ㼸");
    Test_ToJsonFromJson_Check("Ⱳ⯑蘠ꑻ틸䔷", "㜔", "", "Ꝇ겉男뒽鋆卓ឣ剀‎", "䮗�⹹摀⊽猭平", "涖姷튂ᑄ郵鿼襂꺀", "宀趑ᵮ᳚뻧", "硰炳⭎嵠渌", "᯻朖䎲༘窑ꩫ鋘ᶯ", "刮ढ़쌻뜢⭃복ꀢ톺鈷쉄", "㦜ꑿ", "", "쪧䲶縛㷎蟸᯳戡", "", "搫쥗ὦ", "", "ﴏ", "뽳눴滚彧쓣");
    Test_ToJsonFromJson_Check("ಫ꾁䉚簯", "䵿ꥎ↑因⯬﹍", "鏇쾮�Ⴑ", "꒳ၳ甘ꞻ잛촵㹾⩽", "恵✮ᵑꠅ䮇跇�刂ᠰ", "紈壖祮ΰ", "啪℘⬊郅筹깹ፗ", "矓颀", "➔뭼", "ć", "⻷沺", "䀲鿿", "㠵", "ᒋ瞈ﭤㇽᗢ葫", "⢺씻ᷓ⺲趷썎賰ᣨ", "ግ哢遱뀧쫵", "鏕", "�幞");
    Test_ToJsonFromJson_Check("鱾놬Ȯ挹챛鸠", "䎗찈篺찖㎳鑰⠋", "", "㚽Ꙫꡙ", "緉ﾾ쁍⩖�", "∘Ꙙ獰ட韶怘�稲", "櫊뜩ﬃੈ", "盀", "䂽秃杗ゲ轄뚁餤ꟗ", "₈⇕㢨蜯焢ꃺ艣钦匲", "ர橭쥘硻⌬", "彌ᆚ", "茱族╖", "ᴣ", "穛籈竱�䫪�̈́", "ㆹ뗌啰ᏻꫬ阓尹", "瀶ﰎ呻庛冗", "뚣䝧첳磛Ⱙ虑");
    Test_ToJsonFromJson_Check("鸣䤵粛⣩숤ᇱ", "䣭啊৮搮푾", "娡㐵迉龰ໞ彈", "쒜", "佯瀇ఽ⃕紼", "夽쨸싩", "㗃춯様%౜", "寙臓ힳ蘏", "◗ન튘㕧෨櫕毭�", "", "拓鉡�ৃ셒", "৯ꇚ⪏䒱", "딐렴蔸系尴빮镮", "臡臨듇ꟿᡐ휪튠", "䶖ꑁ羰䛷祇", "ⵛ듛ї춇⹻", "鈛浿⺙硁뼰ᨦ촖ফ퀓", "珈㸉剃隚唙콮냂");
    Test_ToJsonFromJson_Check("쁷ǽᏍ噰䫊", "僔", "隬", "", "⭀⇴㯋喉", "炋헥", "�", "གྷ", "잜霽", "潕袂⠔瞧矚㛔㲞", "", "䦋䕠", "쌦ㄒ韎ᠧꝼㅌ믒", "ࢇ欥⪱嵗", "穣�᭓煇폺᙮塟", "ꝣᵡ≐쭂뷉篤꓃穴潃", "煓弟ⓡꈾ⠂芰簚", "摚턙");
    Test_ToJsonFromJson_Check("", "뇸间猏쨉芔螆趞ㆼ�", "Ⱟ篝", "鱹뮊鰾Ὁ", "", "⥌㦉堁", "洇", "", "읻", "㓺귕", "ቑ죄ᑩ右瑷䌆ଢ଼¢⚯", "", "칳ꫣ䞩ᑛ⁻", "虴肫냹", "ࢼ쪮퉍䓛֚ͮ홀", "쬀&윚", "䶃ែ槉浳ἧ鰙", "諔");
    Test_ToJsonFromJson_Check("붉⩘", "⺒㱓䩌攁ڤ", "籉麥꧷", "", "鄶騩�", "纕䒑俠⌴噂", "쨳", "ㅪ팕萌䍯퇾�", "嬊䁄흗˯韜", "꣉榑ᮍ䊒真吘햾", "ᘅ礥马Ȇ", "䌉⩙焪죝⦑", "琣뼛閦魨㠉䛭", "溴좕�⡕䏑㔆Э嫨", "ꖏँ꺣拉莿憟㏇ꐟ彶", "ꉎĸ", "쏢컡梐", "ẓ₨䕮");
    Test_ToJsonFromJson_Check("຀귢", "艾晊㎨减灌葳", "", "ോﺲ洸遛茹称奆", "魒㐄⋡", "謃鲀", "搳㪊", "蒋㟶䍁ᾏﲛ魣졏茘", "셝伔䫳䌢䳮", "ᖖ箿", "䞈젫", "褆⊢旫㴥", "꫆ᷓ礻ᦨ霹匯䁒", "쀢�趸ⵒ", "봭癛㿼꽈", "ດ啗ई薐讪�ﶝ핇䱻", "쁑鮀㨫", "婄");
    Test_ToJsonFromJson_Check("풄ೈ튒쳫䐞", "뿤ꊸ贄", "༼", "蜆䣮괙뢍㑪", "ྫྷ�覹粬", "鐃‐♳瘀缾͚", "즗⻿點粹❠ෘ띘", "麟ݟ늽", "曙", "냼ꎑⰑ赅넫秣", "胐뱍ৈ㶑◤ஊௐ䆍", "즆", "酼", "ﴀ땊쾮蒢唤㊀䗤", "", "䩷콷צ굠", "ṃ✌믔︣▋⓰⤼䟭", "⅋掾﬏닂퀩뾼⋹懄蒰");
    Test_ToJsonFromJson_Check("琬Ə圙判譆鵅䪵Ⲫ", "郮ॷ챓", "쟼澐궸ꀠ뛍䜿緼ꤹ鎸", "渟ꚢⱡ䊝蠫瑬팾뻄", "볇㦦䇒뙴�ꉀᝳ琒颿", "飄Ԉ歰揰乘䬁͐⳽", "⠡癮", "჊ꕞ훞럋㳳ﰏ唠", "卟", "ﲜ쀊菉觑⠐", "쭻䶓쾡쭞肚㗙ષ", "亂ꦦ䚚琥", "ﵡ⓸㈳ᧉ㛹", "ꐏ莳ꦅ䔌↼", "⪌�俷쇋ꤪ却僮挡", "Ꙛ", "㲯攰", "�圐");
    Test_ToJsonFromJson_Check("૎쥝ﷁ俢", "醝뽫됈쉳넸ꀈ爘퇈", "", "蹘罇", "‧䌪帧㤲㔲", "⤟ꘔ셃逧瘇읃悕᛹欥﵁", "ࡊポ罓輥봊", "锸떚㋬보", "홨襶鍹磫᫭", "�눐ถ", "ｳ燷௛䱓롃⬛徰⡠ᮣ", "蒖賾甖Ａ즰妐皡㑡", "퍀ࢽ䷷鉋ḛ⿽齸刣", "ࢮዠਓ㨿", "업봉㑣섀䉭੠", "댬氮䛪", "᷋ൺ璂鞧參年狩", "㉌❷ꉙ୑૩撣");
    Test_ToJsonFromJson_Check("隰ᴆꦜ过", "妔ᱸ㵘轚⢅ު凰ᣱ豳", "콊", "꧔蓖㊥萖ֆ", "ꈚ퓊", "隉㟆歞", "Ꝼ�ﴨ⑷꽍ꋭ繭", "", "ླྀ㾭Ӻ慺갆軔ꂛ捨", "晎�๒儀媉䩃", "燶浦桼熊ﺄᜥ㼓", "躈", "ꧤ팗�", "", "ຄⶊჼ", "旀齻٥⽲⧸鿹魔쏓", "5", "ᘪ館㧈뭋ی픤挠");
    Test_ToJsonFromJson_Check("", "匾⧒덓ህ诞뙲", "ੴ둑甝ь", "ﴠね⧁郣꜂翈颹", "蠏⠞舓㤨豒컃㥕㡸⅑", "", "㷄�뚫", "⦃獇츆豠ΐ∘", "鿎音羿㑲ﵸ", "Ꚁ嫯㌗椳섢颃", "饷", "瞸쭟⫒糷꽳襩", "鑜툿�", "⪞灝袟", "", "벩᜸㞥�䇍ૐꝝ", "︘", "");
    Test_ToJsonFromJson_Check("齍", "串", "釳韣", "뙅䀗ꇱ�﷍苖Ϥ", "ὴჸ䎡ỡ꣋", "ᓧᕓ侠督靛蓘", "", "끿", "骗횇", "鄁삂祧珼벼ﳇ", "᭧ॠ怐", "눏", "ￖ", "䞊ꢄꩈ律怟ﴴ䑶", "斟", "㶕䱶匁뒐狈எ腞燶ⱁ", "롙", "䔢챈");
    Test_ToJsonFromJson_Check("", "煅", "팺廎૱足突鵨ﱟ", "戄硔毬", "⺅", "螼擼艉堬싖", "뤼厡윖뭯釴កﮢ嗔䘝", "", "坙ᣖã", "巣䅢渼�盏ꛫ쾀型", "⭶꿯െ벣짭", "앋꾯�훔敝䛢", "蓟俻ꄑ喡ᨑ츰煴", "詘䂎ﮐ，", "쩫枺ﰐ", "쩐턊", "촑", "᡿꠻饦즪樥鲾둇鞫");
    Test_ToJsonFromJson_Check("١⏰禤祩♊넇㖬", "", "ඛ죉", "楋띂｀蜇녁僦", "탽ⰳ佱", "鐺䰬帢", "毢匈�臭嚡⿦줙", "刐�斫탧�祓ȯ", "ဣ믝", "��", "㍦罪↣唊Ǣᷰ⣴", "Ʃᇣ譗㺎", "뜬㤰䗾ཞ諘䷲睈", "궾过驟㊘灶", "", "둒赟ֈ餹ᦴꗧ", "㢑", "Ꝣ");
    Test_ToJsonFromJson_Check("䐞樤椋�䝝৲⮎", "ﬖ☊襏�繦櫗렗˕", "호动성", "㨽ᖋ恗㽌뀫贄ꕼ", "ᣍ㗾῱究ﴩ", "笣뾣纴캷鴰", "Փ", "朊뼼끐ဆꗜ", "湣혐ꟍ", "៍ꉗ瘟픊", "厞활", "̵Ꜣ顖㜄슒ब", "䚗", "", "䂗捽", "퀀㵍▞핆ᖡ‸鄏歅抾", "⛱뀃", "짧ꁐ");
    Test_ToJsonFromJson_Check("ꊵ", "赪Ȇᵈ蕹韕ᚼ첂虺矝", "쏧Τ↖ྡ๏疘", "촖᳭", "∝", "", "㆜", "逦顁໧齠썇", "썧ꡕ࿴ꮆꚔ", "₫ᙞ칢瑏", "ᅉྷᾍ쉬", "⨠溺ꆪ즙", "개ၛ敟ᙥꡇྭ", "ꋝ꽸敏䊝㖅櫼", "ꊬ펓", "༣컬릧ୌ郏", "쀃唆媏ꀄ尤䚌ᴁ坷", "뻡ඊ쀬妇妠곑");
    Test_ToJsonFromJson_Check("ꁉ垰㿍쮦숷䠏鮙", "鏧⨨હ멕Ⱌ툡ӑƕ", "⾚砾걅雳땒峒鱳", "愡", "큖磡", "ᩙ푹鄕ᶉ䔫뇵짛濼ƿ", "嚳ंұ튖赶Ī᷃", "瘝ꅨ죊㕕錑ᐾÉ볞᳉꩘", "깡虬㌤�됈", "똝�톗", "�ꕒ", "ᯩ耚轕틲", "ᦛ㠯", "", "믛흙", "崂", "╽㖜ჭꯨ䴜ቧ絻쀖῁", "⥩蜺ℑ");
    Test_ToJsonFromJson_Check("衠", "鶸➪ᵘ妕㶝દ罫씊쵼ǅ", "袏ꈙ壹", "爅ꨋȓ䅼迒柇뵘쟇", "鐦", "婻", "猱鬎鄟ϔ㼅", "Јꄣ森", "쯺", "忥뢴ᵦⲅ䂉솩䜟꼀", "깙ﶆ䞕⥏媠桦욌樢雅⋸", "ၹ裿", "ृ꓅", "뵺", "㝳頓䕿郱佳ꈐ", "䗝☘�⋳琞ᖶ윦", "ﾼ≲ᾔ⊙", "Ә茻⇐ꐕฬç�");
    print('\\$2f6Unit Test Success: UnitTest_ToJsonFromJson_TmMap (42 tests)');
    return;
  }
  
  bool unitTestResults_TmMap_ToFromJSONObject = true
    && runAsync(CoroutineFunc(UnitTest_ToJsonFromJson_TmMap))
    ;
  
  /* Test // Mixin: Getters */
  bool Test_CheckProps_TmMap(const string &in Id, const string &in Uid, const string &in Name, const string &in FileName, const string &in AuthorScore, const string &in GoldScore, const string &in SilverScore, const string &in BronzeScore, const string &in AuthorDisplayName, const string &in AuthorAccountId, const string &in AuthorWebServicesUserId, const string &in SubmitterAccountId, const string &in SubmitterWebServicesUserId, const string &in Style, const string &in TimeStamp, const string &in Type, const string &in FileUrl, const string &in ThumbnailUrl) {
    TmMap@ tmp = TmMap(Id, Uid, Name, FileName, AuthorScore, GoldScore, SilverScore, BronzeScore, AuthorDisplayName, AuthorAccountId, AuthorWebServicesUserId, SubmitterAccountId, SubmitterWebServicesUserId, Style, TimeStamp, Type, FileUrl, ThumbnailUrl);
    assert(Id == tmp.Id, 'field Id with value `' + Id + '`');
    assert(Uid == tmp.Uid, 'field Uid with value `' + Uid + '`');
    assert(Name == tmp.Name, 'field Name with value `' + Name + '`');
    assert(FileName == tmp.FileName, 'field FileName with value `' + FileName + '`');
    assert(AuthorScore == tmp.AuthorScore, 'field AuthorScore with value `' + AuthorScore + '`');
    assert(GoldScore == tmp.GoldScore, 'field GoldScore with value `' + GoldScore + '`');
    assert(SilverScore == tmp.SilverScore, 'field SilverScore with value `' + SilverScore + '`');
    assert(BronzeScore == tmp.BronzeScore, 'field BronzeScore with value `' + BronzeScore + '`');
    assert(AuthorDisplayName == tmp.AuthorDisplayName, 'field AuthorDisplayName with value `' + AuthorDisplayName + '`');
    assert(AuthorAccountId == tmp.AuthorAccountId, 'field AuthorAccountId with value `' + AuthorAccountId + '`');
    assert(AuthorWebServicesUserId == tmp.AuthorWebServicesUserId, 'field AuthorWebServicesUserId with value `' + AuthorWebServicesUserId + '`');
    assert(SubmitterAccountId == tmp.SubmitterAccountId, 'field SubmitterAccountId with value `' + SubmitterAccountId + '`');
    assert(SubmitterWebServicesUserId == tmp.SubmitterWebServicesUserId, 'field SubmitterWebServicesUserId with value `' + SubmitterWebServicesUserId + '`');
    assert(Style == tmp.Style, 'field Style with value `' + Style + '`');
    assert(TimeStamp == tmp.TimeStamp, 'field TimeStamp with value `' + TimeStamp + '`');
    assert(Type == tmp.Type, 'field Type with value `' + Type + '`');
    assert(FileUrl == tmp.FileUrl, 'field FileUrl with value `' + FileUrl + '`');
    assert(ThumbnailUrl == tmp.ThumbnailUrl, 'field ThumbnailUrl with value `' + ThumbnailUrl + '`');
    return true;
  }
  
  void UnitTest_TmMap_Getters() {
    print('\\$26fUnit Test Start: UnitTest_TmMap_Getters (42 tests)');
    Test_CheckProps_TmMap("�￿躮䮠馩�", "㧖⢢羋⽪㎜৏렊", "鰉橿蜽韋�╝㸌", "疍", "콠", "酞韫㘇힞�", "鳔ꂆऒ涮�뗗", "﶑䙢꺰ꦞ", "㬪●ꜛ귦翮漽똮", "먳�⿵枵", "۫芁≲彲", "콬", "�拺윰", "㞪㷗᤾虝䰒ஷ", "듡鷰那춴庂ᄼ", "尚豈젮훇懓奲쮄⸔", "ꑙ", "㵹徲㼏");
    Test_CheckProps_TmMap("拣䵱䌏�㯂ᓭ", "뽥뤎祰ᇡᒧឝ밇", "䇢", "윃ᆟ퇚箺᧸䤩", "揘䢊儞祹㚏풓", "쿽騍큋", "뭷", "蹪鈤ꦀ㔭", "㎀꿈�ᴶ๏㕭∸缲䁏", "㪂", "ᇁ﹀賊惍됞", "撏랭", "�׭駭겯ƴ", "쭜䢝", "䵙嗍珐瀮㍿", "阚⦈郶炼", "弊䮷⃷쨗蝢ᳳ쁼", "㶑ꔘₜ齬聎雄攩澴");
    Test_CheckProps_TmMap("뭱過ଚ㩕ၪ㩾껫墰", "䕂륦홰떌䱇盰쩑虿", "鐷痚ꄻ滇�ꒉ㳀䈾", "枦", "䉶杻�죝ᝫ᥾鼾㮦窘ᤲ", "ୣ筃痒胊", "墒≜蔗塚", "᠟Ꮍ⁭豹理癙⤊웪", "⏋릈䨕＠߇₹紇秉", "읝㆒刱❕騐헵�", "벷쨭욢璞�ᐡ", "䨗ও�휋", "ꗸ鶧ㆌ痒㇌", "퍑", "", "森ⶍභࢆ⑧", "沕К߄뽇㪢㸿ᓮₙ", "鄠짭㦟");
    Test_CheckProps_TmMap("", "蔟Ι龲ꇗ⡔辅⭉", "ￔ쥲兆崤颦", "쐭ғ㒴퟽ᗦ㴟봨", "", "㱷ဥ院", "䃹눭쯺", "쫉䶶", "鷦耢鬗⁴炆ᔻἚ", "༏큝㫓Ⴒ嶹堠", "ힼ㼓", "⁮ꕕ뉲�工턈鉚枛", "ಟ", "뼊谥", "็۟弜쌘㙛핺﫽㑪", "쮞覑甃縎", "", "Ҹꃈ䮣ᬬ컵嶐");
    Test_CheckProps_TmMap("㻗﬽팊�슍郫홟㕤", "䝛튟뿎ວ扚듍꩐瘁쪟怢", "狥Ü매", "聹匂仰䭬鹃ȟ薲", "䵌‱䘢먔᫣", "귏毥᥃", "픭蚏ࣼ䪞㧯", "នﯸ滣轁竁怒ৈ⍪", "惗酁଱᮷", "畉弐狝פ뤫硥", "�淲ﺆ跏㜤샱", "틖ꎀ", "袿칉谜訷໰胖�䞈䚴", "罽췜歵ȧㄚ�妐", "뉐㕋퇪㷗뚪䬹칭", "ጢ", "豺댜￰", "꥞琷᯵テ䪮䅎쯰");
    Test_CheckProps_TmMap("嵐䓸瀓䳻Ჵ﨑ꁄ", "", "ⵏ骗뱼扟킋泎ⲅ朓复", "훃덙⋵隸꫍痈쎣", "绽ᅧ猣�嚖竝", "v鬕", "ធ", "鷪䈥⏀淓둬ਈ틑ꏛᐰ", "", "啕ኞ衍蛜", "䃿fྔ㐔ᡄ鷂", "섎", "늋", "㲸肅瞇᭥⶗褰씌踵", "溪৥롰꬜䮖揉筢", "⦥๤즿ㄨ穂Hᡶ⛥杭", "", "긽榈俍埯퐥ঠ἗넾ᅳ");
    Test_CheckProps_TmMap("婓菨뻟௎", "诨⥇Ш", "꬈फ़Ը㌲狊", "㠇趣馸揉᪥溊", "悄௶揸ꥒ叵﨑밍뇘Ꜽ", "贙殺뱆ᩖ彐쑥밃괦㮜䔐", "Ν曶됚", "ⱝ侘⏾齫ﾌ䳙", "澎낭荸〈韴๠쌩", "⿳훿☸꤫睊", "铟Ꙓ鐻ų⊺�", "他�慺㗻壺旻슽", "㣕ದ鴆䟎", "뿛ၲ", "␹鈖躇", "�䅴", "阊额禱鍾齪床὏勐", "㐙㷀뵌慔駐윳陑镉⣀");
    Test_CheckProps_TmMap("㾥괶됼헽⇐춻", "앨⛳唏", "", "剭ﺏ柙㕤쩢姽ἆ奨啈", "뒱㵉ꙙꌗ枚", "龭컏�嚌솱挂ꁪ쥫�", "ᢦ폛⶯", "￨℈⩝ꝶ擆⷗륶", "륍虋陱濣", "莻ጺ䭉胼ᑝ쨀", "蛫龆뇘", "숢嗖ᘖ᮳➄䛳碸䀠열", "﯐ည쥙鎫籄艍큋詁", "ᢿ砹罜䖈줍꾋", "뗔ゃ諪ﰞပ꙳㜢㠱뮄", "个幚", "", "з");
    Test_CheckProps_TmMap("迪뢾풕", "ڄ课幝젟󇸷쾨", "�⥉嫾쀵ꑐ", "陨", "", "缰", "", "껲﹍", "輖", "灤览Ⱳ斓쪺", "Ȩ㘅驹", "ᖦ涹㵲�젽ઌ㳲嘁�", "멫캿욀쿏靆", "罶㭹뱍᭲긞膐", "ĕ�뎿�ྊ", "ݹ話亢൓⾽", "⊲ǫ礳惴", "");
    Test_CheckProps_TmMap("擭", "⼝줠딳落", "⿎譟䏭哧唨䌲㓂䗻", "푍봴", "䪵", "赯", "絵橱꧵钖", "꣒뙤偌눘胪⌊핤촆", "嵎", "̐Ⲯ䈭", "꜔䤩", "▦⼛傟ꕅ", "턴䅕ℶ࠿ㆸ", "票彣饽", "騆�䂁ㅽ遦ﾅ偂忺", "锏▽ꇲ䱐敫뒦숾䚙剠ﺯ", "띎�琳廒ㇱ", "幚쓼ሩꡂ");
    Test_CheckProps_TmMap("", "಼떍魾Ꞃ譮缫穘覃", "鳼歿捺퇵�렡ڣ", "떵�鷜™櫃諄垇", "朓紸늹鷲尣", "墽욤츙촐", "䟧", "䥾箉穘ꇠ", "묁폹", "䃜鬲㋔", "腪쓟쓄퇗븇괘", "ǋ鯮镘嫊冠愃躊ꁸ", "췥뾴ⴾ愫팹룼崬銌", "郐濂", "꩓ꓛꝘﺿю䗗ꕩ髽㱮䂗", "裹挬裀ǃ", "畹㘅놔筶ꑢ", "擝ֈ胑苒ᒟ൒閪");
    Test_CheckProps_TmMap("⠬⨚⢅", "숅郸浃", "�", "쥒瓶➣빃鞿", "脍䣢椃錂ᶨ", "⅖픻", "ඛ䈱렐ﴂ凘", "됨㾕봠簜߲쫋侵", "뾆濾庰", "﵌雫忡閊뺌킮㴗퍶", "␁퀞�", "弆", "᧫垃배⒔ퟭ焿◰熇髾", "⏉碼恷阀衴猱", "獘", "", "뇆쟨", "挹");
    Test_CheckProps_TmMap("鷞≦烛ྦ蠔嬙వ", "�쒿뱴墆�∗", "", "믅", "�だ", "㝎那끧߿栚䌒胐瘿", "�獠", "窺◫Ī ", "瘤", "㙬ͳ邊迬", "虋㖈ᘈ缥躒�펀", "ᕉ豼೵㧑훷뢱⃹⑾⿚锔", "", "몳덞帪㶩ꦿ㺕", "藅끴", "쯢脹⣞阳␫幣䤁瀱", "䥰�䳷쾞", "䡖딇␮弢㒴캹차");
    Test_CheckProps_TmMap("᤼蟋嵨㟠㕆蔎椑豫鰏", "䂮뾟ᕫꕷ韭쿡塸��", "", "㯫", "콠距쥎洺툯", "", "壂", "ⰻபY", "귿蚙辞羡褡✸饎㩚", "䯻犖檣䗜띪鼖", "㶜⸉⁭䥉腪壋⣮坐", "樨", "귊ꮅ螯ꢁ콧퀫", "쁣", "薦䜾ຩῐ朿丯", "睚혤", "㥳x䝦绅ⷊ", "੷삢ⱅᾠ唏");
    Test_CheckProps_TmMap("", "�铙ឡ撨㱫㻃뤉", "貥喅览", "쪊솱⶯铊", "ᅼ┞弑쥶뙎䈢䞨泿쥄뒅", "쫿뙡쀿蚺", "≖葉崵崜뼺쪌頌⛌�", "빱ꔛ覩䢕槓ﺉ麖憧器", "㛐盿", "प沱ߵ⸏䪉", "ᢆ民⏩㶏娠趯", "칰懌⮲﫩ᬀ으", "챉ﾸ൫䄼", "ƫ镆ᨷ鞏캠雜", "ﵥ⁥㦠ꣃ뛉", "끕蘆㉰춈", "ꏝ뙪", "䇑홂᫐퓙쌄");
    Test_CheckProps_TmMap("㖹鐶鉥蟎⅒蓉", "킱봣쩰ᾑ笍ᐠꟊ", "㡙噬�䄀ੱ", "皚ᮎ씮䡨瞠ⶐᮌ翪ৢ촩", "솁᠃", "ϱ㊢콖�", "푖鑶㺽而텞줌", "쵑쌂�恜", "ㄛ嶂�", "咛夢ണ�拼", "ⓤݜ撌窘룛", "鬏⾍塰祛壏ꗎ�ꪮ", "尛ᬜ", "", "耭䢒墻ߊ⭔䘷ⲧ", "斱送", "┄", "㙖㲶㙢벾㄄");
    Test_CheckProps_TmMap("榮阯魐節�믜耿ᨈ蒁", "ਏ�勀", "", "铠䶚똭丢", "諉ମ", "豩ફ筌杷", "鄠殺⤎", "곫퉥ᐶ猸湍깿䇆尟", "鯋", "䲝ﳦ枊귎", "邩䘸", "祀训黯正", "젡䒲ੲ쟗퀵㙙頻宬畭", "陑제닪鈚횳", "蚗뭘뗫�ᎆ䉫ᶉ␠�", "⺩", "헪㳀哭鎉", "�ꖫ蘨ᐾዸꏔጴ燷缿");
    Test_CheckProps_TmMap("䮅扌訧鍬⻜", "", "紵뎃", "േ歿ﳤ䬀떊", "᤹", "鱑矖钽뿲", "ࣀ⒔舒勴⽭䭢", "갔쾟疦욋䳾ⵙ", "좿僤", "꒘ꑸ", "蕦㨮ᩲ茴", "騊㷘鰹癏빇⿜೚�", "", "럘㊔਎╅迤稘蠌ܡ", "匚䅆炝", "슆꟫謉㐤照愄", "箿䦭", "윩嶮ꙮ䆤瘝");
    Test_CheckProps_TmMap("▒虄汝往﮳�⦩䐃켚蕁", "⒂޽癖", "ↅ퀎", "旐ί愾ᔡ�㓎", "", "ꁴ벘", "㇙朾萑浢ᣙ陏帄", "㻜Ϛ", "皎ⱬ", "臨厮槤", "䇊Ᏽ⼐㫎ⵋ絷礫", "훣嶄䫢%淘螩ꆢ", "榠བ౑啖З띜", "해쁯㔩裏", "悜", "౟稵愫", "", "䑰〵");
    Test_CheckProps_TmMap("", "�閫ጒ쿟�蠝⍸⭫愡", "", "瓐醘쥓㷹簝执쀰", "", "꽃魝愯兝⢛", "握荑ᢩ", "閔", "ᡙ随₡쵱﫮౛", "ꗉ놱", "푘낫դ묢苶픲", "龼㰪", "菫觘฼῜", "", "怘阌衅ꐷ棶Ꜣ", "螐썜旫", "", "迈㻼");
    Test_CheckProps_TmMap("⅒蠖텘཰醣놸", "௞굾፻⑉ᆐㅑ", "䙟㠆ꧻ튎シ엂凛䋶漢訩", "뭇ᴙꔴ䡚詴協᧴ꬁ", "㊀Ꞅ鵓蛜귮ꭉ贁", "枮褐㜊虄偧", "법廑소穏砱y", "蹛㪵⭍ȃ䞋ቭ괟헽", "赟ꫤ揩価柅㥴抽�犏潯", "酕䚪ﺶ솊姿", "樥쨧싮옐皈", "�瓤��耎珎霑้", "墆㖤᠌", "", "暼େﻍ", "뗻ஹ誼䌵盅唄", "稣㴺郘", "ਖ਼䞯ኡ趚謘뛟㰜뤏");
    Test_CheckProps_TmMap("㼆빐骡", "娸곓͟湖", "ꙅ轄绰㻠ꢍ彝⊌헥", "摀兦Ⓤ", "唠↍", "蛱弰뀿屑뿏闻✩", "窃牾塳゚", "䰼", "�璕橅", "넓ꈱ�ꀊಷࡑઙ", "㬾㼱艻㋌⳹갨㠸", "硃Ј㷒Ƈ㛻駛", "荅릃⃶㨀幺", "尺㝁ࡍḀ�", "쑴", "쓰蠸皁", "峡䎁ᴄ⒴", "");
    Test_CheckProps_TmMap("", "ዿꙺሃ蹬≩", "咇斁榇싰䞵", "ꅨ撠똝祳싄䉬벴쟀", "멚쭔鲤닐↕屩芧卥㉥", "쏾ΐ⃽铘ꠅ", "궥鹖��ᵤ薝焷燀川蠪", "ͮ㪆⾽梋ጰ隅搰ꡱ", "龺搛κ훡楃ꤢ㟽灀", "棫", "晁ᙐ犙藃⿅㿕롴䭄", "儊걟", "�喬羊寓칪ꝏ湠3왧", "ꮄ㱾暍", "萸�", "紙⼅ঐ�㍼", "ᦳ玨둷㼚�", "");
    Test_CheckProps_TmMap("犎", "㐄鶽�⟜顀崍邵耊搯ᡔ", "龒ﰙ伂ﻳ", "䥀灌穇톭䀾챹鄎汧贽", "쩪ۙ", "Ⴏ쿔黌蟽瀭", "寔퇥魗芻뻣䡚", "苾ﾅ恬캧", "괻☃夜", "੬", "", "謵씂䉃⤣杒簫膳肴", "쌂", "㐼", "쏽꿨毨悌〭", "롈㦾眬붲䓂", "姉彧�騺索㤓늗", "ᮠꔱ쓗툆㰛ą");
    Test_CheckProps_TmMap("섘꼼찗쳻Ꮊ핀⡖뀮ෛ", "劢鰇ꅏ䨽唱�욟묙", "橌", "�鮨‘쾨", "㊯轈ﲄᱰُྞᰉ", "됗㨪촍�", "퉧ۇ㘻�龈ĕ怋", "꟥쉟宮⡱쨨", "睇֖蕫卮ﷁ퇮瘌", "鶴㫥", "숩̔窬瀜屮", "픮馛批ꢇ♒햔ḝ", "੠ו⑧㷮葝楕ਵ赔", "澑땲䁫璎ំ", "즾", "禙눥芳ⷢ㗩郝瓇퀏⊢�", "", "㝮囹ཫ斃彸蕗䡀왠㺜");
    Test_CheckProps_TmMap("�Է舨♼刴곦", "儡琡﷊牘쩗뎌", "⩗", "兪겄旜㵮홇", "䉡�垘", "톄鱆쥞↚믧퀲茕", "꽎", "熊擹ᨺ汗ꏿ晗䃺믛", "ᑓ檁롰홸ȑ", "늺⟶啷鷼퀯썵", "", "", "땊䙊肌朥", "䀰⿅꪿ዼ橌", "㡙ⷆ낂㝬割", "浧乛偗㡰Ꚇ࿦", "璑", "킷䕂ﾷᧇ엍噞");
    Test_CheckProps_TmMap("₮İ", "ꓺ兀ꒆ�㇖", "簵挚䂭꣕", "౯ኽ긷⬕ꌸໃ�", "ﳟ⢱툢덩�㏎", "뇼嫰", "褈欍ℳ", "ﴼ䭣ﯜ둉", "⯩㸋輑릐岴衚쌚뜉", "䆌靍䑣", "໰�톸�", "ഺ䆹屛ꏹ湻愇䘐", "摷綤ᑏ⑹貆羦磣縗閔", "ᨰ윕没㿊팏佭", "듫灀⼮漖ꫧ阑왗", "ⵇ璯ꛫ뚳ᤤ⃻䣾꣜", "榿谘ꖗ熪◬ࣧ鴛", "鲐ὖ⧧ᒔ藼嗕徸㖎銎");
    Test_CheckProps_TmMap("힫鷺崫湮戀목顉", "࡙奐欘♭崶ᴧ", "晏嵌Ꙭ", "⊺볟Ꞌ└蓐Н濙", "伺♍", "⼕補虜", "㨽渐ꢹ㍅䙀", "쫢졵欁늳䵋핂쨄Ꙕ㠌ꩆ", "呰", "גꚇ", "忻룠딌坰旗挌蟡", "肼ꧦᶣ僬", "꿰輨ⴷʱ惆陕㺀⛹뀮䅨", "ⳑỺ藢ᨱ�띝齣쀝", "▕㣛", "油눲Ｅ㌟", "乗彛툲鋪岲栭", "냛");
    Test_CheckProps_TmMap("벛㋳潸暽⅃柯", "琾ឺ䉲擾뢺鰧", "灂ᡟ", "榏᥈肷ᗤ貙⠽", "䫅ဨ", "ꥷ吢ꑛ嵦쿊퉈ꦖ", "麨摹斈垃", "Ҭ缦豄篛�", "䖥", "㘠⺷붚넏殺䗛摆軒헝", "㈢⡌�槗༗↥꓿ඈ槶胅", "첗䰸Ⱜϑ", "쪙떼ꔲ렉ᕬᐄ", "", "伌乪馦袾栒뇄順", "䛱鏦㸊⸼ࡕ㭥", "㥋", "痢⟪盆⻜崥좜루⚷녻");
    Test_CheckProps_TmMap("", "�茔㊲⒑輀례", "끺ᢩ勎︟", "詼塹⼿�琘萖鍨", "峥韩㟕", "鎞㾪㗪녠⠻좺", "확醑䧽낗老셤飚㳺", "ꄤ쌽ຨڮ", "셋", "맴ꏢይই肔的৶ﻎ排", "蚶䔫涄䓇鐒㻑ꀥᝅ", "덥ꕾꇾ㜓䈠䮸坆", "ꫛ鈳裘콹㳱⭨", "甥", "郒℁ᴉ賱婽ఈ", "寸⧶觢뗻ୠ蕶恪怰", "ꊍ籛챱", "텘갻ﰡᰮ隄镳숷ȼ踠茏");
    Test_CheckProps_TmMap("銮鏤㇠痜淟붆䁯", "ꎱ�ꔠ⟨ⶋ뼩檧", "烕骻穕੾깕ꕣ專緐", "帘⩚ࡈ訔韻꽩", "涢︭᥌", "�￦᫅", "茿뿴ᝧ憅긓쎱", "㤯", "ㅮ�", "", "恫媰虠ⱇ鳟", "ᐋ뙄˔ﻋ梠", "䑷㺄␂蒊ྰޤꣀ", "넨햜͑�綝", "ﯯ볉㰱", "騸ॏ⾠〆䫠߽샴⭟殳", "利̀⦭", "쯼館뻛삶竖彉ᬾ౹饑");
    Test_CheckProps_TmMap("㎁䳵鿤", "跺㨮莊", "욕盥�鱿텥㟡래", "蟨儑쑝榀襢㬛就䁙慞", "钠튜詮�", "攞௬劻볏㢘ा矉嶬", "验⽴˛퐾㟱禲휉ꙺ⤙", "삽깢", "覥ⵍ㥏䙅", "હ", "淘쭁馉뒿↽̨", "Ꙓ瀽솳俴䑋", "읖տ⾆㻑⊖䙎", "馽⾯宧揈ဣ", "禨᳡텠", "⾤쐣", "㦪짉ꋞ쁢雳", "餷瓦䈺構");
    Test_CheckProps_TmMap("荔", "᳓ᄿ", "Œ", "", "겞།㞨ᕌ", "킅㒏㲇កꠤ룠ዉ䔆", "", "⳰ꠀ줌攰吻သ쵚��", "痎걑뚠떢：䙅좍笑촖", "�", "⨫쥰⽡ⷙ떡", "馆㝫䠗鸛", "ꭎ熠쿝啩넨曮쭜끗", "䶝⤧疫ᬟ剚ꙗ", "", "", "ᡈௌힶ猧ꈈ䷟浣䊈", "");
    Test_CheckProps_TmMap("◘鮣謵䔌˪崷跘ꃛ輪Ჺ", "猵읋Ẁ", "勣₂敵", "콯郵㞢㟃誇", "⬃�", "徑됦", "⩖", "鯉砡硫䟽岊餄봷䑭壟", "뼊됺", "筡̛敻", "頪秽記", "㮔ꋎ縊", "㔏呥竐ꕻ굏", "䙂鴺滭殍쏊ﶆ�䏓嵡", "愺ယ", "ఙ", "氰渧僒챂", "ȫἀ礳袜");
    Test_CheckProps_TmMap("颈哽䃖嚫", "榜튉鵶ǌޗᏠ⺕㡽毊", "跪ꀇ⅄ㅕ湭뤆烜輾֍", "퉢䦨", "感�", "ඉ덑㣎�ᑗ遚躴勤", "뾯饠뽱䧓", "", "‹函骬ꂹ찁鋝퇯︭퀗", "᮴", "黊玓옙䤥鿷", "", "㝾顬Ʌῴ啒䴪쵏", "緽酌▧ठ꽣", "酒", "纲刓覛", "", "");
    Test_CheckProps_TmMap("䲀눦榪炘㇍⇜獕ᑮ", "㨗ᕓ䟏竌", "欃", "ဍ狣闪ം颏瘾", "ꉆꨋ룧", "੶�颗", "⧛椔ㆻ녩䄝邓䜃", "緳푩粖悴ᣉ謝", "㮔歴낤", "븹梀볫뀈ꫳ쯈ヲ⊱", "ᕗ郘", "蕵", "", "﷦㖀ꏶ", "倱", "䟡", "⭋࠼埔䉦", "ღ䤣ឫ혍ꡞ獴ퟅ霺");
    Test_CheckProps_TmMap("䚯", "ꉸ再쪓凵ꔕ塐", "峗쯂십᭯ᥭ", "쉬�", "�癐", "", "灜屿傩桙", "勘舼䨶﯈얭튺", "", "䛳諳侬좷鿀赹", "ႜ淉샴慑䝽걄苬", "ഴꖨ倭䀗", "䫿ዾ⩙敁籔຦㶨ᖠ", "葳睰鈙懛ᨉ쐉Š", "೒", "⽗ऀ攦飭༼뢈�", "댡㴊퍰ַڡ", "⟿໏");
    Test_CheckProps_TmMap("Ꮬ繲뉾杌᳝", "傲랚Ễ踢䙁", "㳡舢썿", "癰䧡ᯙ秗쀔", "锬겳긛街", "뙝笿䜎䟷屼먓鲖", "ꇱ哴潽ힺ쾑Ҝ㘤墖", "읤", "꼾힏", "", "䱟", "藝ꝴ鋔뱢挳蘲", "謳ɴЂ쾋ᢋ⍑덮", "㊗簁뽕ெ쏳眣匩㹊楷뚺", "좄ᾄ阭吭蛅", "峖冡⹄槊", "", "﹭ᮿ፧");
    Test_CheckProps_TmMap("ꏃ鳳", "ｋ휞泭뀘瞕", "ꮪ县㑲ⰴ扼ꖰ䌄ꤤᩩ", "앐瓡狚࡛瘽㬃傣", "讕ಠ莭쐐ᕉꑤŏ菠컺ꇫ", "ꮺ�쳽쐲㥁䝭", "蠾", "磿᮱暇", "ぁ띊蹓♒힎ꇈ䕣謃ᣉ", "", "拚豞繀谕퓾ᒑ", "嬈ㄛ�嵽", "", "癤㵍꣩띷㦑", "ᱜ", "", "", "봇");
    Test_CheckProps_TmMap("잍", "�䤆㺏㍸", "䩧Ἵ쟳", "狶�׃䙩堻䲳䠐춽嵛历", "⥰옄䣁䠅ⶽ鈺侤嫒ᓋ", "쓩樔㏯唃䆈", "厽", "粒㷛", "∮峵ﭵ", "ଧ艳粮囃쳍ʬ磬", "羕絃⇵㷟췘狶碛㢎", "", "᾵�곕ܮ⭲덇璫", "ᧃ�欣에Ꝅ�剡큯", "兡퀷�蕦작᪆얏", "媥貘껝欄�薮枞࿛", "띲쨵", "㾒涑舳");
    Test_CheckProps_TmMap("輛訬瀩輗罬붷", "樞", "켗肋꓍涢", "沄끭浙께糩ᖞ࣏ᆥ", "", "騍ࠪ뭭솽К뺄䦿", "闧㨫瓗攥", "呫賠擱蒄ꡊ샂Ḁ", "樛攘婃䥤⚆", "", "ᯠ�੷፰", "ᢿƿퟫ", "뭟", "闤놽홛", "㺊෫㦤孺ඉਔڇ", "휇ᴧፍ⥵삼៸᦮俞加", "혤騽", "¼稸갍捁ᩬﰸ");
    Test_CheckProps_TmMap("믄闙", "㌒ꨥ迟", "鸟ᴷ�雗", "ᄞ斌੼ꆠ尻⏪ꤩ", "⪢穫檣", "ퟣ歍靚숏撒珩", "", "谺樌芝㵌", "璡졺堿났璸럏", "넡滬꼮瓏વ", "㶆䬍㚯̸劒츘仧", "ᔛ쓿�", "薟裰檎", "〉铒䳾䩱", "팍ﭮ⳱쁡⪯ᘦ陕", "燆悚傑飂翧╚癠薋鏭ៜ", "", "껝蓨읗懨䓠䴠멓橿");
    print('\\$2f6Unit Test Success: UnitTest_TmMap_Getters (42 tests)');
    return;
  }
  
  bool unitTestResults_TmMap_Getters = true
    && runAsync(CoroutineFunc(UnitTest_TmMap_Getters))
    ;
  
  /* Test // Mixin: Op Eq */
  TmMap@ lastChecked = null;
  
  bool OpEqSimple_Check(const string &in Id, const string &in Uid, const string &in Name, const string &in FileName, const string &in AuthorScore, const string &in GoldScore, const string &in SilverScore, const string &in BronzeScore, const string &in AuthorDisplayName, const string &in AuthorAccountId, const string &in AuthorWebServicesUserId, const string &in SubmitterAccountId, const string &in SubmitterWebServicesUserId, const string &in Style, const string &in TimeStamp, const string &in Type, const string &in FileUrl, const string &in ThumbnailUrl) {
    TmMap@ o1 = TmMap(Id, Uid, Name, FileName, AuthorScore, GoldScore, SilverScore, BronzeScore, AuthorDisplayName, AuthorAccountId, AuthorWebServicesUserId, SubmitterAccountId, SubmitterWebServicesUserId, Style, TimeStamp, Type, FileUrl, ThumbnailUrl);
    TmMap@ o2 = TmMap(Id, Uid, Name, FileName, AuthorScore, GoldScore, SilverScore, BronzeScore, AuthorDisplayName, AuthorAccountId, AuthorWebServicesUserId, SubmitterAccountId, SubmitterWebServicesUserId, Style, TimeStamp, Type, FileUrl, ThumbnailUrl);
    assert(o1 == o2, 'OpEqSimple_Check fail for obj: ' + o1.ToString());
    assert(o1 != lastChecked, 'OpEqSimple_Check failed comparing to last obj');
    @lastChecked = o1;
    return true;
  }
  
  void UnitTest_OpEqSimple_TmMap() {
    print('\\$26fUnit Test Start: UnitTest_OpEqSimple_TmMap (42 tests)');
    OpEqSimple_Check("欽᩻⫤䨣叒䝇", "춗䵩첏㞟", "㚥涬凙ﷰ눵뭩㵷", "⃩쭶퍉", "", "霋흽묌铱蝔", "਀ꩣ釪�麑遬徨탏", "壝玃勑뤋펍캒ᨶ", "叴뢦⇩㵣䎵", "핦壉샴廗ᦷ氫ᚘ킅", "诛퇟", "ᚬ쇳濶鵛獔楷", "︐좙桭垛峵כֿ鐄ℛ", "冥㶶밑幖許ᬤ쿊菆", "䝅攨鑽烆ঙﶇ䚱", "ʊ冿�Ⓢꖠ", "䝕뭀ꃲ썵㞫䫆ើ鹆", "鎤쎣");
    OpEqSimple_Check("摃䍎␷윸ຯ", "␜῰蹎쟳횱宙홧㉜는ꒋ", "蚵⧝耏盧", "ꨕẽ뮱", "ʱᯜ鱦ࠡ", "噚셑燵㪆汀ᆣ젙", "䁏ਮ虴簪䤀", "䀐硩钗", "䀿虿砍", "픽鳐ꈉ", "⣣뾈噦", "⻰쬟칁", "�㏊뻹媋痰", "糓岁ꮸ㏧㽤᪮壐", "�", "嚅⒝ࣾ", "⬲櫇ꟙ栥鏡螫", "ꅯ껳ሌ");
    OpEqSimple_Check("耽裮ዖ锲釹ឰ墐", "໿ꍱ꟤��뙑", "㤬꾷", "즣傪꼻", "汢ꏠ⮶䋧館胄", "괗饖㪟", "汆講㓤통�ﭝ豲氹φ", "뛰�둕", "秨玹桗喐", "퓂䉰ꋗ嗳ರꈾ", "ώ", "צ츷⩮", "ⱬ褑ཧ捺슅엎筄䄗灰ᔃ", "", "�⧙곢歒愪ᱧᫎ", "ꃢ｡뫇묯릕⛲", "瓪ﲥ疬᳢䩶㩒", "墨큽咪઼側똶뙈");
    OpEqSimple_Check("ꛬ苵䎥�쭲鄻콨�", "祒蛕䥓", "�", "粄⅝挝㠊", "共䳶넊ᙓࡀ컒", "", "", "뱜悶ꂋ鰲", "", "踀뤅芸덍", "䌱", "篱鬻", "娣ዯ﷤賚�챀曹", "⟹驵盲", "賥硬⭷혀ⴿ㓶ࣛﬣ", "꒭→⣦룎ⶳ", "﨑ğ螥", "ᚭࣳ");
    OpEqSimple_Check("鰉ᡖ", "", "띟璦Ⴗ婑遚㌌⻄㕹", "䨾㶜☭ෳ", "撍䈒", "庈", "᣾킯䠧◐", "멖�", "녮ง", "텩㚽댯맑힊", "瞐奺ဂ", "㎭啷⨍揉", "", "", "↟ڹ錠쟓쎭뗧䢼", "㝳䵉", "罚", "");
    OpEqSimple_Check("䥿톤聿妒ᫍ�", "閯ﺸ娂ᑠ쟀냖럢쩪", "愶彄纇鼗䘚秱ᗱ", "磃헮躁潿鬐", "̉韺輨浉ㆠ㌔Ú", "図罛⢲Ȃ㹪쉰龊〢", "扆", "稻�ꊈ껿", "ﻯ機", "龕ຽҷ䋰ꭔ䧂脑", "忳쎓랔ꖒ", "", "ﵜ쳮쬤﨣ኛ", "ꪫ㪛숬", "ꄽ圦긡㴽䷗넱�㙫姦䟧", "䮆렞", "⡋늟", "豮ⴈ");
    OpEqSimple_Check("일ٸ顚辑죹⪱濱놿宦", "膞坫窀훱Ⅺ킠�鸋", "씅煍尪읒쪭剈", "ө㩣�轏", "⹳ꈰ뗵丷", "", "", "֩", "", "㵟蝅迨︧兀ࢺ鱈䛳啨", "ᄈ믋왚ꯂ喿�", "䣇ᚇ梅翂㳕࢏", "縰㷇", "∁衽", "迒䌡ഘ", "癓簡枌녑埖韠", "皾澐쇞㍐དྷ", "녜뎙㾣咂");
    OpEqSimple_Check("过�蝄合", "൹貈垸", "挧ﳗ졝", "暮㟄䷫킹륦了", "䂃堮", "ṱ帮—뜔愄츿첣⦝脘", "㳞繶藩륍韚킉", "슭펵", "汶틤榸", "䅖ꏊ軃頴罩絟磶", "禾", "", "❮뙡여䯥鍮幘滆", "텒綒搅聍Ꟑᨎﳌ祊", "ɯ䃟", "ꑧ⩱ꛏ�암䢢갎穯쎙竗", "뾩ᨶ␫祡扁", "뇁讌弴ᄔ䮕밤");
    OpEqSimple_Check("م륳⏏᧎䫁詵䯻꼊", "쌜⺢", "㣙㾯禗", "✜ྦྷ", "낤햳釽⛧옩炰၃鉝", "ⷀ듅㡐沁祿", "休ￏ墥ℓ", "렳墄䖢⊎�ꮏ", "魍镠", "ꩀ옲", "ⅶ엱ǫ揆쟶孛﷤", "姐䊂⤭�Ჺ", "챵ꏹ", "ᛁ�", "븥ꖙ∴簾뱟", "綽ケ摓릺칻啗", "꺥", "ꥑ듴");
    OpEqSimple_Check("鳙막", "탡뒤엄闼嵞뿭燨ꍶ⨙", "䀷픿ᨏ衔", "グ㘁ȃㅞἄ辰思莽䱪", "⹄", "房댬㾑ໞ탬鏩Ⓜ恇闥", "씤", "૾근邺㣿䟫랴", "俵㧠儂攑짱㥑海Ⴗ", "띴勇", "캌涒誀叞㇘㌬", "", "", "攅樘犝ⳡ늵꜀㏔绨", "", "Ư⥣䞘询獽", "�", "䢿眭᫜侯억맖Ⴙ潊");
    OpEqSimple_Check("", "툇", "㿷䆞룦ύꎝ�霃", "鿒", "풭樮쟓銀氢", "㲰핋嶣䇙寇鼹", "", "桀蜿쾖촱痛窆섀뇗嵢", "", "둪┉堼彠ृ䘄蘁", "딠㶷蠃ᚙ鋩", "쓩�", "햍", "눮㛆຺拇씌", "튂䄕᳂꛰", "恁䄈♈ꭰ蘣", "≚輒营ꗭ뙌", "㫋�べ瞃辞妝㩁");
    OpEqSimple_Check("", "Ꮪ⹅", "�躌續", "毰덷僀ᖊἦ", "␓쌍油蒨騵岌ഠ㞞炈", "ㆎ棌�곔櫽", "ڷ寀�", "ᴧ룤ꫀ缎遁", "沣￟㸄ໟ䄺ꐶ⯀ⵡ", "ꤢ䎲⠋젿糖앻嶚", "⹉㊘၁᫄鍹䨢䵟", "톓췾", "", "떶⨨ᘟ戣", "ቒ녈㰚ㇿ", "ீ憨", "뇺扐葁霤黟ꮪ辝뙉", "筙Ỵ莙");
    OpEqSimple_Check("ᘾꃥ촄㍕札펂ឝ뙽", "䩷悑", "况脪㢒⻋忡過", "", "묽ᴂ㰶剎䌅糣Ӄഷঢ", "餥", "⺲댾麎靜ꖛ", "긺簼", "㗲玬욢죚뫦号", "핈䌶୷媉軪砦", "㫷ൈ�ぞᓺ", "棓쿏ϑ᠟釿뾂䌑ᕊ", "翌㾂閈䨝", "戙᤿䜦鈷兔呃율ᤞ鍜", "䞸鄈", "몚첈㋨", "ң�黾ᔏ", "Ӑ铨䄴ꓛ廉ཝݿ厪");
    OpEqSimple_Check("珱鲅昿ⅵ�졻ꏳ沗怛", "㤾䝤㰯䕼", "㛠஑뚀�⑴", "✷㈳﷥똭퓄﮵", "멅⠟", "⣻ّḧ", "轘␼℡짉", "䨴쏸휞", "즹␥㼳쬺義瘺", "怣楊멕纍ⷒ艜᫮⪙秢ﶼ", "餗뼂�", "ฅⴑ鋆㫊훝湕ᱝ", "幺ਗ਼ᓊ鹿ݚ띤⻧⾁ᱡ", "륑깾귵獦", "", "昳占㵊㱲﹒푽", "ɓקּ", "嵞䄁緯壣媂ᆠ");
    OpEqSimple_Check("댓໵噫", "칲ﲤ荏嬸虶", "ꮂퟄ䬰왊", "㟧⃟", "羊テ", "잷輠烖ᩬ䎠찇ꑆ鷍", "劗", "䠜ヸഫ傻䂓㯄좑콤삓", "⅒瓮", "솫劊좂響ض쭂槶ﾽ꒿㣶", "㎾腒鸒닞鉤⡄꺁", "聮怴䭝힢", "㉫", "什ꋃ鱚઄᷼嬺", "⌇쩆ঢ়", "ﵿ쀡宰�橈ꔟ", "￪욱崙浱", "닯薾뼁곒윶");
    OpEqSimple_Check("䐙ꛎ葨皣懁夀㎛圚챞", "齑간㴳鮙", "�", "绱㑝韼", "匇", "嵀崁尉ꊹ", "푔ﻖ䋘痡뗏�ᓀ䉾ॄ裗", "䵈戨", "⽷먍汃", "캊偛ᖧ⠀㲰ڣ", "ﵢ띣莹⫖㺄", "咃ࠄ裞ꥭ峘갤噴崤腎", "镵⮖铢뢇懅⧈碴熭彰滬", "譪", "⑰ㆤ헑仺䐟ᘇ枙쌀", "", "㻯", "䞃俯ꅧξ랇㲑�㹘捲");
    OpEqSimple_Check("믷γѦ㙉ﰵ鹖氫�᧬쓔", "ﶝ䤄嫿�扚彡㉆䥅푒", "ڡꇹ", "࿍塾ᨑ垢", "", "뼧ￎ", "뉢ﬗ䩂", "馚㤀䧅餍葐毉", "ྋ嚋䠬", "☷", "⿄䅓ﷇ⾂啷熖뤶底⼖", "ど谙퉑跛﷾䍍㥻䴚꒦", "Ꝟ冷硃⶘⁌뙦鰠", "⯾淂꒟釛", "頶ꂨ걜", "貧䔨㌅廏㻣", "丟娜츀М符푰뽲", "뵷鉌䳷ጥ頦眞");
    OpEqSimple_Check("⫰䈬퐌쮧㏡륳덏꽠", "�", "춂﹋�掌�", "虒擖ꖜ", "耝뼮鑟", "", "鬿鯪哠햐氧﬷끭嚵", "ਞ杻뾬℟맏ি", "疀곱", "Ҍܱ症᯷람⃧", "덞⯏뉺", "虉੪謾䖰⚈쨳皓", "苶闔화᪢", "ㅚ汧䖬鮇䏹", "妯扚냘锇㙙࠭힄", "♺摵ဢ珤㖫듣", "倏叉檩浐瞹◌욡", "�ﲾ⾻㍷㚭ﲌ楪窏");
    OpEqSimple_Check("m", "猄鴀屒⋧怦鶉", "ചᅉ寬뭛ɩ翚ጣ", "각䴂〪散қ", "", "듦ꪫ䥀袯⯇ﶤ", "䚘", "槲뷖悗롁ꯕㄿ峜ﮀ꽛눛", "뢭痔䬰鐾㌉앷貶鍓", "ం⮌ዂ䯘금", "氅巃阴븣垶훪롾", "ྈ杫૳ꁦɹ�䴦", "ꪞ⹥돝", "ෳ曽曰", "", "➤⛄", "̡䅝", "䰱籄");
    OpEqSimple_Check("柎縋餠펜銆꼡ѣ", "嬼슷", "琰ש⴨", "믦ݭ䣞�劔錵阸", "", "๰挎࣬", "癣못餌礵쭁", "㚈ꊼ瘙ꎜ", "㦍", "䰆", "㭊ᐠ픲䖆", "卵哖ﺇ", "햐", "쒜타ưᢘ墇", "듼߭礴㸠䅛澿ς왆郼", "퍢", "卧�", "俢㹶惊氹");
    OpEqSimple_Check("", "镀", "챃疵챃୺뀸�", "휢䝨Π๑ꇔ饭⠀径뤏", "䎫帄ັ�᤺", "륕ￏ뚽", "ᅸ뛦", "櫢潃뮚己唙淐挩㯂죷", "Ĩ섓", "尽⪬ꇱ椳轣脐⬒埐糋", "篏ꃸ㗛擱�", "䛨鹭", "⅘솅俳蓋", "ძ놈⸨㼼蕑髌訳", "ᚫ㳟黛磍再倮", "ߐ循ꍿ䳵᳍汏ꡁ៞", "ᅎ钐╆哫�ښԸ鋸�", "돝歄졬凎");
    OpEqSimple_Check("紉ࢼ薷ඕ럥鸂ᬓ鵨꾀", "㋥烢癦䪌㷳", "홆綷謀㾜쟶췾쬡啨", "", "໱", "駐쟅橊", "�", "⢵佫예ꓜ饿嫟剾܃", "໊뛵溭ᲊﰙ", "馻筺䆈ᚬ攔ﮣﱔ", "䇃", "픏ᡱ篢", "쓺ᾡၠ䱑", "甬塗™ૢྪ찘", "", "", "齬✌凈️ḿ", "砒綠ꫛⓙ朴硜홨");
    OpEqSimple_Check("蚶荕縰ᤡ⅍", "ᯍई︜�㫃", "�⒰", "㺲�䉙", "庖겅撫䙑簤䱛↠�湱", "疵샯뙤", "섔�", "꽀ႈ胗჎롢㋎", "�쫫퇊", "껸琗醋鈻⭖㏺욊", "疭⨔뉒뛰䦄㢼", "坈య榒㐄杭", "쵗诱嘡ꋉ", "六꙱븀⹀휤ꪅ", "", "贩羊鰫鹰䊦䠏ૹ", "䬮", "㷹톝뙤麶錙�");
    OpEqSimple_Check("䗮笠닦햿᥿퍸枎ॣᗆ", "ൻ됈३纵鰮힙䉯", "矾ꕢꉼ讫숅黻徟⏥", "", "⎚箶쭀쫵漸歇鯏", "汔瞉騰ᝐ蛇饉苍Д", "㠆ℬ顉㥘ᐔ䕝ᴈ", "䅕苻໷踠ㅞ삺蔳羽珌�", "ꁶ騼", "掘䬜롁亊ᄷ섴쵦औ", "쩩", "π呖㨈뒡", "ﭚᕦ⩳짌澸奩꩏", "⥇䦴疵⍘녵뀪", "㲨袽‣軎껬ヰ∨켈놳", "춫�", "妩", "ꖗ漣鐯");
    OpEqSimple_Check("", "醶䢶", "䵼뉭듓︣泻", "ᛀ", "᏿上둆᳣ᔍ䕶", "", "듓", "㺄گ틄㉌忹枎", "믎纷⢋㝗䈖达", "⦪조꽤㩤쿉䩘", "봺搕裏翯ꖳ", "ፊ䙈", "䡐ꦦ䡗捧⢳", "뷬ꋵ厯꽦哈퍶", "ᢇ憖䯞愒ㄟ⯧", "씻翿ღ熦ᆃ뒁炜ꅽ", "瘼죨◰癞ꩶᓥ悀㥉", "Ȯ刚㈎녀৉");
    OpEqSimple_Check("㝑韪", "櫒徼倱", "꘲䣔⋽ビ", "荆᫟ꉛ", "颓ᙃ씕獪", "⮨ꆵ٪", "넩쨀", "秕왉碉⿟ꣷ㎑", "®䝆", "", "渌쓘⏑␔ູᲴ䮻颱", "곖", "㚐", "", "2⧖㩉폗䂬", "ㆬ珦洂㲉", "⼈ꊺꗾ窼ꏀ䦌�막ⴃ", "㩺谽丝�窖眄");
    OpEqSimple_Check("僒⦨푶", "耴៚⺧㆏丂", "⬭෢ￛꙛ", "ꀬ紦諒毄✂", "ﮭꭢ⍕컅Ổ̬鰘힧柃걔", "뮂", "猰滻ꓱแ溉綦", "ꕳ볌꺣ꗕゑ", "䔤奄�慞踢擼릏堻", "〿턉䵏䭛㼪ᚯ⮍瀔", "珯︍ु歫仦î긆�इ", "애痸芥둹랃䋍࿽", "訌헕春ꄬ隫ఌ뾪", "淀⤉㳻ꨮ龓", "", "靑⟭츭徹燓䛡ꑑ쁃", "솘뎢ꚽध骸鿬聹", "ꠕ쨞龎");
    OpEqSimple_Check("莁এ瓁散瘄䰚䣖⥖�", "雧", "㋁㲮", "᫩⊭�變쏺팙❷홭�", "�㙻�蒷᫣", "໭⋩쫲䲞訨䕌", "꼥웤惺߆ꖫ禐挳㒡⭆", "蹶鵠", "ᒧ䗯��⭴풼㯊㑭", "閂⺞㱐ꋹ", "㼐⢙ࣛ嗳ః", "಴Ɥ뒮袤␎⬄ቾ聨誴", "昌", "獌꡺", "퓫峏煔삢䍾뗘", "챝ᾩ츫眻煯쓷᣻", "ᨷ삺酠㯲뀏㵞휔", "ꊕਫᾗ鱨ᾃ缕");
    OpEqSimple_Check("", "헗褩", "", "", "ᝲ벝죃", "伓訫", "읇", "ﱱ", "˱麎㔅醧", "胠볰", "毲下推☪", "槷✔", "", "竧㠍侮꽙༬", "媙", "쾷�萝", "ግ甆", "掴칖ઌ");
    OpEqSimple_Check("ᕛඪᎄ羽孨函", "㷉综䄤囌⑨覰", "᪉�ᡵㄓ", "캜鏕ഐរ䔱", "柧쟄칂", "광ꢲ濰俬", "ʛ隸", "ꛠൖၬ돹궕쀵薧", "夔軁逃急", "貴柆祊዇豠憺Ჽ瀺", "䶆", "쪭ཱྀ", "瀨祲", "웍盁풵", "ꏐ㬁뚈鍉ᜑᜢ̒觼阜", "ꄡ㊽珥왪댓헄", "궺闛츄錧", "㻒겂ꍩ㱭Ჵ⟸䎀");
    OpEqSimple_Check("濏煚ᚉ暾ꃫ䪎", "", "ㅘ艶⃸ﺏ", "訬ﻀ샍뜣䦒鮥昝", "כ됁嬆꘤舣怠", "�辮矌카", "驶�", "匞㹾", "", "毤ㅢṀ틨詐", "჎䡬ഝ佘뙎ꡕ隚", "䝟嬧友蘆穯", "蓮犸鶦㻛쁰䪆", "菼蠼ℬヲㇶ䊄", "�彶", "䁊쯙ꕩ塣셄镮罛", "쪆Ⴄ", "⫌וֹ怭ὄ᫾㜸");
    OpEqSimple_Check("遂餑ﳰ嵏﷛顼ヸ", "ෆ⩗昤囟籿", "栠", "꤫鳿샔", "꜄䘯쎧䉎挀쭷", "㏍쨺�흹丁䨯驻Ὰ瀖", "봴婴꿌過僵", "Īϊ䔊䏈⍸覆հ祑ꙝ", "愶헓⡸", "瓓휗♠", "挏", "赧踳豃柅屒ꇙ浹쀎醤", "뢎谸恧휚", "粘幵�욮୩鱢⺶ⶃ戢", "曷혬Υ৹㓼믺튢", "Ȱꊔ餻蝕呐", "퉘㪩穨熟韼Ǉ끒ﶫ", "䛩䀏쿽ﺪ");
    OpEqSimple_Check("ဓ䭀玙㐫ᓣ", "枺쓉 흷", "戆㽟▻➂앨ȋ⩕䧻썏", "�", "䌉叜볷", "蓃瘀憹⍅ⱑ멘ʊ轢", "석㾸뵙ꙻ懶ﬀ㷡냥뒥", "涍㿭鬻䳬ᜠ孚鹐㈜ᐽპ", "풕", "鎄瑺ﰹ㷚㗯", "㐜샊飰왂㿽", "ὐ晏�궼", "﮾湴ꦾ哪Ꮯ氶", "㤉ニ♠暧", "轀蟀쀾⬻鈏�ꦻ", "읺", "䑷�㞕肾", "䫵ꬋ疄찠暋ꋮ粋");
    OpEqSimple_Check("", "秇䤊�ᚂ탥ᜓቶ摍", "ਔᠲ슉煔ࣀ䪵貐", "駀汶疟邜耵깠䂢", "旊", "䳶阀ᢋ�춄袴", "敚䓊념䆱먕ᅨ뢩", "뜽ㅱ㡁喲ῒ꩝", "鷀စ郚", "墜䟘㞃�䱽", "", "℡檐₠搑ዄ崷꘺쑨", "봭ﲞ횕툩", "ꆆ❶櫺纍ꁎ쩲ߧ", "", "㸲負寷篝퓎䤥閤ⶊ䣒", "梲⎸ᓮ놺慞1фⱔ", "⠷៝죟裈쉽釉纋");
    OpEqSimple_Check("긨鎖댾湪䫓�▐訅", "뒡卋︠", "渧䎓鿫Ī녔飡", "⛋拒徛", "瑘寎", "傇䬖ﰙ燚晐怆", "厄", "य़烃霢", "蘢녆՜䮢삖ᰜ얅�", "䳚ಜ໅慛͕ꈆ禿䝇嘧", "汻햅↖▒⣘Ἴ碍", "멋뮻巛㡜졋ꨞⳛ", "⿄㬶幣य", "�", "︯䴰탺�义ﴐ൪钾", "靫솥৴捦ᗌந", "뗆騋䌟羈", "");
    OpEqSimple_Check("텰돩�쎨췝ﲣ", "", "㢏愛汑쮖적ଟḡ਼䕷", "䤌梸㋃兣ࢠ", "䌑蒤ިݝ꾘ꐆ�뗚", "姀읇暜缘", "፡牘縷ﵬ⪦䪻", "ࠡ❽돸⺥", "糮틟��䎼", "÷潰ꂟ", "ꜙ⨂", "쫮妧쑳एᦱ亐", "", "鋟農�긿㒄젝錆鳬插", "", "ὰ", "灯뙺璪씯昱䆎ꮂ", "퉱췂鳓谝캨♄贷");
    OpEqSimple_Check("轂ṋ퇋�ﰅ", "ᓎ꜊", "䛆㘫榕鯸庞Ἱ쌓", "㰚蒍计翪嶩ė譝", "擻", "", "", "Ⴘ苫몫ﲆ㒳憇ល鵩J", "췜ﶶ⬍湁ो", "暴ᲊǦ", "翾៚螕", "뛐쥢㯸ᇨ", "偵䪴됓孖橏", "嵶��ᰤ⢆帤艏㾏", "햆ᰈ湥齝薀왽谓亜", "̯幭ꉫ읝㒌ܷ", "ㄪ卫䞴吝鬰᥾", "ॿ㋻⮹弄ⅽ麹丐");
    OpEqSimple_Check("≙ȳ诼", "푂ළ㷪쭠㑳", "褁쁝", "鋽䑵텃혃䮉Ɠ饾", "攅鲱됷㲵��칞錋", "钤宼貏䱧ᘴ", "趌ᘄ햋康", "薇㡞ꍙ᧩ퟗ㉃䯑�", "뽀", "ㅜ㫴ꆢ�⼡", "櫩㥭슄浼２㕈苖벪呞", "麚ほᤞ䷳ጚ㾣", "銽쐯㳉�痔獥봏�悙", "쉾俻⋗", "緗㚘", "摼褖", "咯嘈⹁탮꙰吷ࡔ", "㞧⳰aឬⰮ돊嫠䒨");
    OpEqSimple_Check("�⍝�䫀귔", "촜垫목瀎㊟놢", "᪦ᑹ", "녚택ꮼጜ쿰磶丗먯", "᪈ち濑읖뉓沿海", "泚膭嫝퓛", "촕恕ᬵမ", "炖䴷", "劀킡㼶骯⻔ゆ≾", "铪ᤘ犯", "", "杫䢖쓘憥涝昤", "펆䇣䋕弓픤", "ꕮ", "䌡", "㉄ᨙ땽娷㔍ᆧ", "⎅Ꮹ교⃀ꁜ裖䢌Ꭹᯔ߈", "≁笺蝐뎞");
    OpEqSimple_Check("搷", "癹৭聏⸪䝺ꜧ㚋ኆ", "뭸鲀윩⩗", "", "⋋책屎繂㖒㽸", "�喩嗯굶", "ﵷ冰ꐏ", "䬓즎憬䧺ௐೲ", "", "餈䔞በ엸Ἓꡏꠝꮜ", "䒳", "", "ꮂ덓揝ꩠ격桗", "䭔", "", "ⶉ爡黊硧࿑䲚궾", "Վ鰬፤", "푴ᒁ�卵�뼰汱讎뚹鑥");
    OpEqSimple_Check("ᘴ㇗㦢ࡨ", "퓒鉇", "", "걈೴ꌁ䘓ᾱ懕悃驆", "鍌굚", "⒅錈뗒芊ᵁଥ", "ଃ쬼⻱挐", "ﻬ뷴꤄ܢ삤퐀촶ᕞꡤ", "ꂤ镮붍쁏ᇱ", "㉈⸴瓥", "覧Ä቗矧ﭜᷯ┮㽔ꨫ", "ꍌܟ", "", "╕ඡ", "ꊐ쎲痽旑ﷆ磴", "૴", "˻҂⟑ෑ鞵콧ש䒔ᖣ", "꓁呲䌗賉ধᲰ嵑ᄠ");
    OpEqSimple_Check("̈́༉솛⬆", "崐背둤蝠㹼", "᫧", "屨逢턉贈屜ۈ ", "뾧⊌緩�ㅌ렐", "亶º℣௳㷡롄", "䃕迼ﶫ谋�ฦﲖ", "䌭炲戳䞲枋賜✎ﮯ鬢", "羋㍥阶禉⬳꣪ꥈ〝䧔ퟰ", "腁乜쓢䕤뭒ꙭ", "蝈뱗柛앙㔒䕸", "ഭ�홤덓", "ꃦ", "顽ꠕ⢑똩䷮鷣ầ㾬", "ꂉℏ˺יִ챂靿㦮⡞뛛", "", "쾞Ⓘ貸鶴蔹", "턷吀谬뛼㴒Ṍꄑ♱");
    print('\\$2f6Unit Test Success: UnitTest_OpEqSimple_TmMap (42 tests)');
    return;
  }
  
  bool unitTestResults_TmMap_OpEq = true
    && runAsync(CoroutineFunc(UnitTest_OpEqSimple_TmMap))
    ;
  
  /* Test // Mixin: Row Serialization */
  bool Test_SzThenUnSz_Check(const string &in Id, const string &in Uid, const string &in Name, const string &in FileName, const string &in AuthorScore, const string &in GoldScore, const string &in SilverScore, const string &in BronzeScore, const string &in AuthorDisplayName, const string &in AuthorAccountId, const string &in AuthorWebServicesUserId, const string &in SubmitterAccountId, const string &in SubmitterWebServicesUserId, const string &in Style, const string &in TimeStamp, const string &in Type, const string &in FileUrl, const string &in ThumbnailUrl) {
    TmMap@ tmp = TmMap(Id, Uid, Name, FileName, AuthorScore, GoldScore, SilverScore, BronzeScore, AuthorDisplayName, AuthorAccountId, AuthorWebServicesUserId, SubmitterAccountId, SubmitterWebServicesUserId, Style, TimeStamp, Type, FileUrl, ThumbnailUrl);
    assert(tmp == _TmMap::FromRowString(tmp.ToRowString()), 'SzThenUnSz fail: ' + tmp.ToRowString());
    return true;
  }
  
  void UnitTest_SzThenUnSz_TmMap() {
    print('\\$26fUnit Test Start: UnitTest_SzThenUnSz_TmMap (42 tests)');
    Test_SzThenUnSz_Check("㍒㋪", "翾鵜", "朹鎟ﳙ", "编", "엻렒哾๺⾖㻄쪼ﰙ⠁玭", "氎꼻㤚藴킅Ề쯣", "�밄ꊦ⊼", "섌", "", "賄�匼뒱", "瀹ፎ", "�佪�䮞丵�￝幻", "牪Ộ푲෗蔃䓥㻥잒", "䟃넲䗵", "竟潔箯㉽貺ᠤᝯ", "쬙ꅇ᭧봅≹", "�ౝ", "ᢐၛⶍ쎦㋥");
    Test_SzThenUnSz_Check("먝瞄⧛鉼竲㽥︠걿좳樁", "䗇髣", "ꥏ꼼砍", "㏰鉓켯τ㪔ﻊ爛", "ꈽ洞⤦➦踆⌾", "", "䩸Ὼ㐚ꂖ摇", "", "᳔䬳⑇勿掝", "最徐㭾멭Პ䑰繤", "퍻", "䟥ፕ⎃ﲀᦓ솛格", "诜돚兽奞ͩ줞", "ᄺ膲", "剼᪲ꮚ෌", "ⰳ팑ꇬ䋶慸", "鐮軅㧦胷", "㸕靮");
    Test_SzThenUnSz_Check("", "궈䩓�", "욣巖ㅡ螘笣䨯䄸㻘", "ₜ阵璫⃔", "ు", "곟ᢏ淡钡", "줒女ѽ泡誄狋", "佌Țꡮ殴䉵庨嶏", "⻖㋽빽睍뉥", "雈皇殤膕躯蓬㥊", "ී쨳ㄤ䒹ਮゴ", "沲", "鐪﹀ྏ䅳税�〿Ꝼ샛", "③享㐟ꯩ㹎ӑ䞖", "ൃ䶀椼ズꡃ᫔躹䰑", "ᐮጧ뎆⸕숈祭", "", "䯯桾뭎挘殤");
    Test_SzThenUnSz_Check("嬚魯ᄍ噕죐ᓌﻸ", "樦纍ﲀ⧝�䄳", "Ꮪ猾ؙ太蠵", "傩Ἂ嚓慻徐", "䫚蜳㽤", "ꊌ멉녍ഩ", "앪衚ध⿺⯌憎祖羔ﾧ", "៳╝⁋컱ⳃ", "刪ᖑ᭬퇠", "䗶찀믌聅똯샩愍꩸", "洉疧ꅦ뭲", "∐⒳伷鳯⽸︧濜ḟ", "᤾℟仅䃜쪪㌲㯊", "ﾖ︔ᡊ", "븹䤭ذ沶ꫴ", "묡拠銢᜼錢樆䶂簜饋᲏", "冤襲손靇뙚䷗", "ꇖⲽ櫉");
    Test_SzThenUnSz_Check("", "ꘓ", "풠氂ᔾ쁄綯", "ຶꔽﾜᵏ䒴", "譥횓ƹ", "òꘄᷡ雘㲅", "�埊쎆㊆⯟骙䁣豅琧뗇", "웕펽꩙负釺锼珟", "麃犿", "陣띰摼푔⼧", "⊂", "ை牖Ⲋ", "臢⫎춂檓㸠", "벼寥ﴋ", "믅༐൨㪁▫", "商ᅾ鲑頸헳ᑭᷡ", "", "乹ﻺ鮷囫я戵");
    Test_SzThenUnSz_Check("撠檗䮋ꏔ箯浔陳", "", "쎡韠ᣳ翠�", "삈켳劻�桮럫憍ᕝ", "륫", "觰�", "�並㈛贆�⬧", "№", "여군햛蝅縰�㔭", "ﷺ⋏晆뗭⴬똣궆", "狤í똫", "믔ы䞀�ᐑꖢ䞶ꡡ훅", "낊㮄瓲ꔽ႙趹攘", "䚦럕ț頛臾ÍἩ", "託鱫댫", "�욜푭沈ĉ漎㛊�", "霭䞓", "肑レ䷋仚饩�Ꮚ");
    Test_SzThenUnSz_Check("扐", "鳊", "⿞䅰ꡉፀ븯扻ꋨ䳘쏡", "ﶾ鞞㉪屹팑", "뒧", "韑튏ࡑ", "㕋�鯃嘐ኽੱ晤斔", "튤⟫砚乸̛瀎ᭆ㍰", "࣊砅婌ਠ愤섉韭", "栴省ᨱ흴뒭", "", "ἰ쟽뻗８ᦲ菬蜻", "桩弜蛱왓꿨᳁ْଠ", "앶㴗ၖ忧ⷾ챲퉗溕㹅", "尷ꦾ첥⡵", "놲싵뇵쯷", "ꇑﾷꃦꅕ熪饍㨋8辝쵌", "␬");
    Test_SzThenUnSz_Check("ꖡ䕯橄�㰿苨앛", "Ⱄㄺ꛼㻔㴕", "窗䊨㎠๥Ⲣ⪒冁", "婬桸꯺쎡魶㭷栳", "泒擵䆲", "铃켴돺븍닑ꪐ脹窕ૐ취", "", "ᚡ窓䲲옮伴ꁧⓚ紝", "㒾ⴙ荡옄샔ዕ", "", "悝ㅍ➵孞扎㹰", "悑翐䈐풼仫즍�狫", "蝶ꙵ隓臹⢺鏿ㆻಖⳡ", "�诨苵跗뼍掰圷", "띨켊෦", "", "蒚ₖᒁ토ф", "憖ꀖ銱❕");
    Test_SzThenUnSz_Check("ሙ䪩引࢙", "灲纹", "ㅿ", "䡍愆ᗓ‫䳦灣眇", "࡮�䢌᱕벵", "뱮὏鞳鿔힢ꤪ", "", "j좠⵲贉韽벻", "펝郀곐캼뎻튓", "", "?�ﲙ྇", "", "䬦ᕴ", "氊듳쎴妓�鎐", "错䆈罹Ⰲ룟晶", "﫦㊷", "ഀ옉龞꺌ꭎ", "茠칧瓖ᵽ");
    Test_SzThenUnSz_Check("碚�뛥", "", "杽㶲焏ἕ蠕", "舫", "軴铢ᵄ택ᪧ彻欓", "䧚炐▖䕥ϖ쇨", "诶᳌帻鈿橦衺", "", "", "", "镫웤ꢚ穧륚�ᚽ蟛", "", "》竫퓣䲊폫⤫ꗱ", "傊톥泈ₙ搯臕䘔꫈", "њֿ㪝", "ℾ쪋䕊츨ቓ瑪ؠ欸", "쭎", "捱");
    Test_SzThenUnSz_Check("닺쿿ꉧʪ쉭邀", "ă拻⃋＊₅뿴僧狑뻇", "葻贲Ⓚﵝ릣㐌", "甄☸⨝쭻䏤ᢠ䫖", "⑓킄읋溛", "", "뛼켄雝繗環錆㕟﵇", "⏪㚳േ᥹", "쉅亠햇ᖇ⼏歖맹훿", "㡆햽㸞", "≮ㅻ赈ᰲᨠ礇並並", "ዼ眒沸쏀闎", "鹜瘁⟱", "斨", "", "ꎭﰎ�䢈", "㖔⍁숇鴕샰㬺苕覾覈", "┗�莘럜");
    Test_SzThenUnSz_Check("搅䉗꙱", "঍ꆡ�鯉罨", "쫒뗺磝", "풦䦵亰絽࢜", "봒ᇲ왙醀莇", "骦灭⭔櫳挧盬䣃", "퐵儋䳆䦺謑膢֣", "뭃⧊萉ꇱ灶�⚷", "銣콇ﲇ꽾᭔", "匑⩶妗�Ț釄툆☄", "ὪＩᬶѣ瀠宅⎰皎", "휄Ｋ咱敏࿥", "", "焄－噈", "稯", "紘⅛", "브쓯䠃ꀼ렠⅌滛ⷖ뿂", "줪꿙找쯡뗽");
    Test_SzThenUnSz_Check("㏖⼇", "", "가郩", "ᐱ鉓䞓", "妛࿏", "㮼쓎憷Ὄဨ㘳顫踠䙲", "", "㗫", "弮�옚䬟뮳ॾ�", "", "", "Ơ", "䀒䍊빇曁绀溜ⅅ࿿倴", "畵䯖쫟艖", "", "﹊鴥묏⛿랥泘섆ۧꄕῗ", "嘍쾽ಕ", "徵ꨩ穕");
    Test_SzThenUnSz_Check("᧪귮煢쇳", "ᄉ⪒", "➲ஊ惧吁略䑹뱕ﭔ卾", "色톽ⱥ졗볆丕鈂", "촷", "봫᧮", "䃳䡝㹅楨鵱ᡐ蜑ዡ", "ਜ툣飗㠝茼", "ྕ㫐濁", "ე", "⿙鿁냱㛹", "柫缾꫘", "矖卤䥌", "愛쫿迩Ềᮺኛ�ꑞ沗", "", "圵", "㊜ꐶ塶靖", "贲Ἴｃ鉃");
    Test_SzThenUnSz_Check("꤭韶啇许䑐㸬涂", "יּ尒䃚ና苔놗퇝", "푑", "ᱟ㉞Æ斫�휋ཞ턂Ỏꁖ", "�溵ⱇ墙ୋ蹽鵔㾡", "逪胲軍", "ꡁᓮ腄墋㽀", "", "ﶈ", "", "᥉⬋鎑ꌐ㭯⦱⽂", "ኈ椉ૻᔔ͡孞ꦔ", "ዬ沛葄ད", "춙끬➒ᗽ}൳鸄ꋺ䨼", "㩪㨹﹵锗�", "釕쒮", "糢쨶波ፑ鄪厦ﴑ봭썏", "㶔涠�淿");
    Test_SzThenUnSz_Check("�迬�", "楟旒笟둀魟䡏", "춶堢", "痒똁蹷팤", "쎘", "ᢒ罯髗ɸ", "", "", "퉕͖ꪍ�둰꼞", "獀톆잗涒", "ᬏ핍竉", "䞹悩", "঑ⷷ莣겄㖡⦲؈", "辜슦", "铠㼢瘚ꡁ쾕ᣉ噆ꡭ", "酀Ⅱ渚", "�뜙翕鏅ᩒ딢ⳙ뫊ȁ", "");
    Test_SzThenUnSz_Check("뜞ੜ", "̂뀈璕", "票蟣麫땁", "䂹꒷ꢫ⣬ﵻ耘ꊻ", "骡蘄", "䗹뉔户묄먢", "짉ꤶ뉄下ᩇ찉", "쮜먏핝祰䧈躺줘웎", "�メ犷", "ྕ嚨豯�쉾캆㠷픮똹₀", " 漓Zᄥ", "戈诣䨉仜", "됑ं콠葉泅梔灲", "▁쳋卝ⱞ㚠璬㊅聾", "琔ᐞ", "섋陝Ⓡ꧀鬴᱅", "ᕗ仯隷", "啇");
    Test_SzThenUnSz_Check("Ό렾℈ꉁ툞", "랖ꛝ�Ⓣ⡭岚", "豱숛᤻溜伔宜", "띘椐犀᝙뷟훇쾌", "沲", "겣逸␳ⵦ鋲遂襥铦辭", "왬㨐✌蓗㬒졂늕", "⯓禁⧛꜓௓�빯മ皯", "꡽◱䞧Ꙫ揮ﹿ", "䭖", "ᜋ䒘鑏ꛙ嶹⍔", "", "鲒穪朆", "뉳㻛骐图秈ᘁ", "雅䯯㢢⥺翣撱", "◩", "향醁줪", "Ἶ贖᧽");
    Test_SzThenUnSz_Check("䷫", "䤯죰Ⓘᅾ", "㏶⚉諍㓥٧", "됔﮲롲沞粍徹", "", "ဘ蹄", "攨ᐝ쪋Ὲ", "䈈춃☴ʍ︠", "俖", "䳜͉跕睾鍛铫匃", "誃냫๑", "ಈ�뼁睦㳓퍓ࠇ", "顸쌋ꀛ掤줆轻์", "䉼⩂㽌", "⮨�쮡", "䃨", "Ⲟ밈", "螵梼䟋乼蠢�");
    Test_SzThenUnSz_Check("", "洝忣�", "ꝝ", "莕쵪꟫帠�端牖콬", "Ԡ귆㬈闄K宱轒", "毭區Ậᢣ⪭࠮틇", "￣䄹⫧Þ橒醟", "颿瑪", "㪒်䛱훗쉂㊥砾裡恫唒", "쓏`냢믲떦ꭖ핳꘦", "እﯴ", "", "庅㚺䇸䉟ꊺ儷򱩻", "䟂ڢ녔", "", "᫢痜颷嬮", "諉癃׬⩤㐤䮒换쬚コⴞ", "鎱ᱹ뾹鰖㽷硔洬ꢯ");
    Test_SzThenUnSz_Check("⊵䀰Ⱈ邋䡮凭칄ẓ", "෸輠蚸", "龑ﷹ", "ꌢꀗ䊤ါꊯ黢ꍆ", "ᜆ鞾嫻⛶", "ꎶ׭甴", "ꚨ㏨嘁﷕貾瀍叶┛", "邉젝皎먳쩩邵", "눅伇㪥ම�횒", "", "貈", "灢胴籃콜鈠渔敓䁬", "茗", "萇༖ⓚ塋娽꯹⼣狼", "", "侊䕺뢨攟廞墈Ჵ", "�ꊪൔ絬茓㏿᪽嗈䟓", "⸡Გ䅬權呋ᑎ藜즋ఠ킴");
    Test_SzThenUnSz_Check("㵭㲗", "㙏", "ㄍ歉뀙", "", "䵹隐ﶚ", "⨈", "", "靳镹츩", "䴨㟜瑇穴↰㻜", "╃鬴阰涾", "줏縍ﲡ땂⾾钳", "씚ꯊ別둱妥ھ", "緀톕턚", "囲䲉Ẉ", "擀彶쌜搬仁좀ꋍ", "෢빠뢣䍽羝꯷乓僘", "ꙣ甇냦愴", "咊辧");
    Test_SzThenUnSz_Check("锳嬶わ", "䀔饰", "國姲�灱줓䑢", "蠒箤̏混뎶삄葺繣", "ႛ㰁똣㚪蚊猆쇮㳴誹", "쓸롴", "觟遱洃쳷", "购껎맂蜂㨉䥨", "匎藟轫⭏◿쳵ꐇ᳗쓓", "䈞Ә泌ྀ⽟ꤏ", "쥀氹狦홉", "쌬㣓蕏⛊䷀", "߻蜢䇻⦰퀊ꂝ隧晅", "扯掀㮻ၔᶒ", "僢臯�벬㬑㕛뫉", "", "彻턗ꙡ", "۝");
    Test_SzThenUnSz_Check("쁎䕸젶ݵⷁ劇剃悀", "勵", "怫讇律羫烧隈", "", "�첃", "", "⭘４㞦鳔亝峁f್", "댇曹ﭒ衱듹圇䴛䶿", "덨材팧棭縴밍ᇃ稲�", "먛Ⅹ䡞エ鹨敳攝횛", "㭹㈜쾹", "∜壎᩹둖뼤鸄﷦", "⍚䡷聽", "恛鈐铓足ኁ", "緅Ⴔ£⅟龧붙", "�", "䁍藽）䃙ᵍጧ램ꏊ", "");
    Test_SzThenUnSz_Check("硗ͦŨ嶸ᓘ寬�", "桸떝؃掸ᙩ訃҇퉇", "ﭥ覅᩿߹�埐섙", "", "爦኿娐", "覭ꐌ砷舋楖뎒뻎롐㑳", "", "풪写", "藌舯�頭駵❵ꪀ催", "鑻ꩢ㱻ാ", "╄렎", "풙", "ಞἼ㠒῟゗㝏䀰ὐ", "礈", "騚닍⻗敞", "ඎ汶㓃뼑Ȫ䀖滉䩺栭", "戊鏸", "論⛜ﮂ⏛氙삲쿊蒽띝탣");
    Test_SzThenUnSz_Check("룜淗䪅痊蒿謮", "蘪", "댷쓲儎첥꬧밼콎", "ﯞࢹ劫匳ᑪ骨侹浨", "፻竛弣櫤胖椝꾍Ḵ铁讫", "զ寅毒ꆻ„악뎷諡", "海猲", "쬇㻱મႀೀﴺ", "⑩始耍滜", "䧏㘎밇姳詰я", "롇ꉂ톤䇇箔ᒮ", "备쨐쮹﫝겎铈", "蓃뢄⼰湠", "⁤", "�䯴庛ⷩꌇ뢍ኼ䌴", "䄡짲둶�䟽첮䲹ǵ", "⢧픃烠⳰", "");
    Test_SzThenUnSz_Check("쿭⫮㯷ꁞ", "齌㳬", "咙ʉ檔�ಔė칊", "龌聠�핿", "좺�칊滘", "涚ꂯ䴌", "桜Ⱀ嫏", "誅抍嘺置㎎讚", "掬㼡셞ɡ緮", "冩捑짵⊁嗩줌㶓", "뗴눭硫옴巋", "�뉼飠ꕻ屭혬䙯", "㧟", "ⱈ咓尿兢⑃", "삩ሏ嘛쉨鞚", "Ⴔس渒罊穷集", "", "埓段簗");
    Test_SzThenUnSz_Check("덾̘꺚裇", "�䈏姆谠引鷢볡⍯", "驵荳뢷", "ᤌｍ簯⬨", "�潻䅟羔☝ớ䣮筈ꢟ", "槖悀�席헏Ⱒ貭㑠", "釽톸", "", "췗", "㨵嘲�", "", "ꮪ㽰欝├挵卾頱쬯捔", "を诩㤟㺬폐ꤪ", "⽕믵㩗�猠", "憅㩭㩏", "�쑡䲞㪘䳗邳㊡혱", "앵樂伕䨩ট", "兲貁畍屄帪醸貹㲚鹵");
    Test_SzThenUnSz_Check("骗⪃鐈䲧풌濪", "⣜讦䴎蝋⣠؄闄郩혂", "쮯옘", "腸폍㭆ꇙ⾉뿷樘", "鹐�蕤䆌겪紀䷲ˑ", "濛㷵௄㑣�㬽溺뻇:뽿", "抄", "퍭奲摤﹉쬫", "④嶆ꗔ㥤", "ଛ鲮", "䲳虜䤅�厱쵺䊇", "냀躧桽⽵蓤짼㡎", "큻", "팞늑ŭ⯈", "匬吇閊ꁑ", "㵐䣲䬐⼆㸠勮ꡄ䢵뫌龔", "譋໿ख़﹍ᢈ뙔", "膊쑙汁�笳戝坴讷좌ᶣ");
    Test_SzThenUnSz_Check("뻌厯ḯ䍋䧾ᬑ", "", "ꠉ嬢᤭顱䨰塘螤", "掇「뫠ዩᔲ䩣瀑", "鸘鳔덍酼", "益零", "⟌簕�", "位", "", "", "鸁炀揔毄俕涌�멋ᄷ", "댞蘩", "蠬䏐⛐䑈想녔ꖜﰽ", "ᓷヲ濨�㭇", "俽㧋꿒澪", "师暂拀佭偷", "Ꜽ", "耂ˈ놵�秵");
    Test_SzThenUnSz_Check("൝笷Ⲫꌢᏻ", "䜤ⱔ芕૽쉈ٺ庹", "Ĩ鏮", "꺋羒珧䟄◚", "赬詖嬉規⠣吃綣", "䏼с靰⺍ᑥ", "", "理훑師䁉", "橋띶햷ꑧᆰ黱", "駣㓻頑", "샔䁡ᛶ↣汳숄", "鴬런폮Ꮓᛀ쮔", "찹씛碷", "⫦葮葺鱁", "Þ�⊰塶롞", "Ꟊ�笋", "읢㛂쩀俑嬗﹒問ꍟ", "㠑ﮠ");
    Test_SzThenUnSz_Check("璪ᓽ岪", "㰰풵႑鐩꿷廒ᣡ", "ￌ㖊㑋�䐩籚늚", "ݢ䝅璫땵", "虾瀑翧楰⻏쌋", "˝", "㦽⛗뇕拜焯㹬", "ೀ", "冀㏠ꠘ沇֩ﶕ텁㬩샗", "", "כּ抆裯紉䠅褕", "扐ꬷڢ㳌", "坦ㅧ禒", "銟彁ᗁ迻臧", "飴㊡覅䌊ꑒ䔡蚂博먚", "㿇뉠៸뉐ﶷ腫疭뺓", "蜕쉊", "叻浬᯳");
    Test_SzThenUnSz_Check("⋊", "പ봅", "鋄㡣³슼", "", "࿏ꈢ", "뭙蠸ꥁ┷ᓜ㉿", "긑쳵툳헆䨽៙ꕶ禞焰", "薸⡼濢", "딘", "腺峄", "䍻虑ᅶᕳ찔ፉ媛䣅犞ಋ", "荦Ῠ袗䧱�ᚁ朝㌑", "弍ﶣ씮ಜ倹첥", "啒秦㍺彞㝏兑작⁆鲇ຫ", "귦Ᾱ彉ࡆ챞맄", "⑛㉮Ѵ펗厫圲獕鎑䖻", "⪬㠬ʤ㗾릨ꊀⵐ", "夼ḛ潐卉");
    Test_SzThenUnSz_Check("꼁偈燀▓਌", "⡷ꀽ᪴뷾㽯䨿ꄊ椟", "�퀁ሗ", "縴ಊ鄙瘢騬", "ᯢ", "卄쨛", "�", "", "댌滗ီ㰶醘", "�⫓䷜ᚷ悮", "ी鬻剏歖㘾꒴첯傳嚜", "", "鮿�ԑꡳ", "䌣ゐម⽫晎", "ו멯鮰䆶Ṕ㥴", "㝆ᙩ", "䄅䫪晪ຖ㴁㮧", "");
    Test_SzThenUnSz_Check("潅ᔎ膼", "ờꇪ", "넺", "䎻㼣桌勼", "뇵풮", "玛迺뤕눉﩮ࣛ", "蘷쫷씉縔桳䮽랒", "簔�こ�珺ᐯ", "", "ް孾樟꣋疠쫷泏�瘣", "㩴巛휚ޓ﬋㈩螧", "‴Ǳ", "屏↤ᢄ퓶끩頳崖", "ƭ굗ﭒї븂칒牦ᄷᢿ�", "偓ㄏ", "崪", "ଛ࿉匸ꔑ㫬Ι匏輯", "爋憹怂");
    Test_SzThenUnSz_Check("", "頢Ⓝፑ朥鯔쀏슉", "鬔暡돦⢯₴ᵧ瑧곶䈿", "ꀮ࿐峠罝닀ﻣ鎦", "땘䅲頂ꖻꏝ", "Ɨ쁴", "", "�骞轭鈾붔朦ల鉋㿮", "냘ҋ㿨⪤", "⊤韓ﯺ⊗쭏ቁ�ꀧ", "�胃ჹ絥␦錷", "单䦸掚쎺", "琮ꪨྞ팳ᤁ", "﫵‛旆⯓ᨄㄞ汼噣혇", "踇⇜铮�뼰ㄭᵾ䒋", "來䅩㆒ᘺ鳷厷툩捷Ȼ", "懤䕢鿢眨훨篦", "淪헦");
    Test_SzThenUnSz_Check("Ҕ㋴諫䂏⪯ꆰ벢ﱳ", "篌켇欀", "뤤⁢", "曨꾊⹴Ὧ횘ၸ⾩蓌捅", "날क赟肠ꇍ鉆꽘Ⱊ", "닜ࢫ䓯⌛锦⏫", "", "沠ಾ蓘㢙ﰋ㦯鞃", "㓒", "瞏譚╳ᡭ㣾ꅓ푁킲", "葸", "ח챰跦闦὘ᅭ㾀᫱騬嫐", "宒Ǩ䊢໻", "䭐⁚/ꅢ", "ᵌ筐⭁僒", "䪂", "䎶㐒ࠑˁ⌎ᗿꗽ嚊", "焐휓띭炮쒘馥裧");
    Test_SzThenUnSz_Check("", "资䇅庮鈁䩍", "踯時塡凞歔⛟", "弻㦻泩퀀ᶟ", "붊᱃貃젿Ꞻ糤", "у۽⊆Ⅴ", "耧쭧黱", "泡졛鏃랴", "㤬厲⩘񩰶Ⴍ", "ฝ࿮룹", "혫", "軇᪣䏡ꧨ廻奃⽴鼡褺汉", "�⼞", "컩䢃ꖨ�왧豤ᵧᢾ龝", "쫐", "ㄖ욤", "陦ө蠅", "ឍ蟥湇Ꙓ粔틮浳");
    Test_SzThenUnSz_Check("걚ꡚඉ튓뮌砃", "ﲔ竸㦬ꍂ岈펔础ᄈ", "잆맦ﳙ㝿", "㓒폳ﺕ⸻姛漪", "俘㙤坔Ꝿ塩䓸쭠蘉", "Ⴗ", "尺펛ટ扡槃", "䣇ʟ蟁鷴", "饂蝛蠠", "駺ࡣ犂໛ᴎ", "㝢촏忈ၻ㶄흵", "諆阆", "⤢尚課悂溓鲦첥꼛", "颼粀ᠪ", "뱘", "똑렓", "", "퇒滮猢");
    Test_SzThenUnSz_Check("䬵", "鵶Ᲊ磥㢹畎泉", "愓輙᭒", "ㄶል紟쵶", "魹㪷✌ꖇ铏㹺溊࿦", "梽旬㯲இ賓ぷᥦ", "齉㖥", "茑ᜋ틡谇ᆂ칽逊孻", "柟", "", "맪驇珲箶ﱴ幔Ꝼ놉", "限蓧諾ⶇ香ՙ燘�揮", "", "", "๜훦暍滽�缫窆쏫箿", "꓂ꃞ㰾뽬ぞ", "嫴뎇お홇ட캉", "ꋂ⁮㐫諍༢㔌");
    Test_SzThenUnSz_Check("嶹혈닡୛似ᾷ", "ᑪ萊庡땋", "筮잵�Ｆ嬢葦଼", "䦚孄焗퐼ꅚḵᑘḮ", "鸭쐻脗", "툵媲��秒⬼ᆟ", "ﴉ鍾ە朻", "", "쿡䩊ౠ됚ၔ盙", "傔ƃ㰁ꯎ져", "쨰뒇鋉촎﹨⣖駁짣", "", "", "⛡", "ギᓯ䚂", "", "椛ㅾ;⿕̴", "톚鬓ᐨഏጆꯈ捺겵Ⅎ");
    Test_SzThenUnSz_Check("ꕀ摎ﴕ化ᯗ佣", "틬腷꿲㍜", "⸍㩎", "�઻ⱈ둺", "堚욂듚", "�腺", "᾽㷦", "", "尋䟔퉓ꈔ밿㩮랤죪궯儓", "铺썀", "ž啅浢핆茋ꈾ�", "滋뜈䎻꿆嚛⺴О", "퐙Թ", "", "샠澞", "ᕪჳ끾", "��", "﬍ᘛ浟ٰ┥ᰯ");
    print('\\$2f6Unit Test Success: UnitTest_SzThenUnSz_TmMap (42 tests)');
    return;
  }
  
  bool unitTestResults_TmMap_RowSerialization = true
    && runAsync(CoroutineFunc(UnitTest_SzThenUnSz_TmMap))
    ;
}
#endif